import React, { useState, useEffect } from 'react';
import {
  Minimize2,
  Maximize,
  ChevronUp, // Boyut panelini daraltmak iÃ§in
  ChevronDown, // Boyut panelini geniÅŸletmek iÃ§in
  ChevronLeft,
  ChevronRight,
  Box,
  Cylinder,
  Check,
  X,
  Save,
  Layers,
  Shell as Shelf,
  DoorOpen,
  Package,
  Settings,
  Scissors,
  RectangleHorizontal,
  Minus,
  Grid3X3,
  Zap,
  Hash,
  Sliders,
  Edit3,
  Puzzle,
} from 'lucide-react';
import { useAppStore, MeasurementUnit } from '../../store/appStore.ts';
import { Shape } from '../../types/shapes';
import DraggableWindow from './DraggableWindow';
import PanelEditor from './PanelEditor'; // Yeni PanelEditor'Ä± iÃ§e aktardÄ±k
import * as THREE from 'three'; // THREE'yi iÃ§e aktardÄ±k

// PanelData arayÃ¼zÃ¼nÃ¼ PanelEditor.tsx'ten kopyalÄ±yoruz,
// Ã§Ã¼nkÃ¼ bu bileÅŸen de bu tip tanÄ±mÄ±na ihtiyaÃ§ duyabilir.
// Daha iyi bir yapÄ± iÃ§in bu tipin ortak bir yerde tanÄ±mlanmasÄ± Ã¶nerilir.
interface PanelData {
  faceIndex: number;
  position: THREE.Vector3;
  size: THREE.Vector3;
  panelOrder: number;
}


interface EditModePanelProps {
  editedShape: Shape;
  onExit: () => void;
  // Panel manager state
  isAddPanelMode: boolean;
  setIsAddPanelMode: (mode: boolean) => void;
  selectedFaces: number[];
  setSelectedFaces: (faces: number[] | ((prev: number[]) => number[])) => void;
  hoveredFace: number | null;
  hoveredEdge: number | null;
  showEdges: boolean;
  setShowEdges: (show: boolean) => void;
  showFaces: boolean;
  setShowFaces: (show: boolean) => void;
  // ğŸ”´ NEW: Panel Edit Mode
  isPanelEditMode: boolean;
  setIsPanelEditMode: (mode: boolean) => void;
}

const EditModePanel: React.FC<EditModePanelProps> = ({
  editedShape,
  onExit,
  isAddPanelMode,
  setIsAddPanelMode,
  selectedFaces,
  setSelectedFaces,
  hoveredFace,
  hoveredEdge,
  showEdges,
  setShowEdges,
  showFaces,
  setShowFaces,
  // ğŸ”´ NEW: Panel Edit Mode props
  isPanelEditMode,
  setIsPanelEditMode,
}) => {
  // const [isCollapsed, setIsCollapsed] = useState(false); // KaldÄ±rÄ±ldÄ±: Sola kaydÄ±rarak gizlemeyi kontrol eder
  const [panelHeight, setPanelHeight] = useState('calc(100vh - 108px)'); // VarsayÄ±lan yÃ¼kseklik
  const [panelTop, setPanelTop] = useState('88px'); // VarsayÄ±lan Ã¼st pozisyon
  const [panelTopValue, setPanelTopValue] = useState(88); // Hesaplamalar iÃ§in sayÄ±sal Ã¼st pozisyon
  const [panelHeightValue, setPanelHeightValue] = useState(0); // Hesaplamalar iÃ§in sayÄ±sal yÃ¼kseklik
  const [activeComponent, setActiveComponent] = useState<string | null>(null);

  const [isCollapsed, setIsCollapsed] = useState(false); // Tek collapse kontrolÃ¼

  const {
    measurementUnit,
    convertToDisplayUnit,
    convertToBaseUnit,
    updateShape,
  } = useAppStore();

  // Panel yÃ¼ksekliÄŸini dinamik olarak hesaplar - terminal ve durum Ã§ubuÄŸuna duyarlÄ±
  useEffect(() => {
    const calculatePanelPositionAndHeight = () => {
      // AraÃ§ Ã§ubuÄŸu yÃ¼ksekliÄŸini dinamik olarak alÄ±r
      const toolbarElement =
        document.querySelector('.flex.flex-col.font-inter'); // Ana araÃ§ Ã§ubuÄŸu kapsayÄ±cÄ±sÄ±
      const topOffset = toolbarElement ? toolbarElement.clientHeight : 88; // Bulunamazsa varsayÄ±lan 88px

      // Terminal ve Durum Ã‡ubuÄŸu yÃ¼ksekliÄŸini dinamik olarak alÄ±r
      const terminalElement =
        document.querySelector('.fixed.bottom-0.left-0.right-0.z-30'); // Ana terminal kapsayÄ±cÄ±sÄ±
      const statusBarElement =
        document.querySelector('.flex.items-center.justify-between.h-5.px-2.text-xs.bg-gray-800\\/80'); // Durum Ã§ubuÄŸuna Ã¶zgÃ¼ sÄ±nÄ±f

      let bottomOffset = 0;

      if (terminalElement) {
        bottomOffset = terminalElement.clientHeight;
        console.log('Terminal height detected:', terminalElement.clientHeight);
      } else if (statusBarElement) {
        // Terminal bulunamazsa durum Ã§ubuÄŸu yedeÄŸi
        bottomOffset = statusBarElement.clientHeight;
        console.log('Status bar height detected:', statusBarElement.clientHeight);
      } else {
        bottomOffset = 20; // HiÃ§bir ÅŸey bulunamazsa varsayÄ±lan durum Ã§ubuÄŸu yÃ¼ksekliÄŸi
      }

      const availableHeight = window.innerHeight - topOffset - bottomOffset;
      const newHeight = Math.max(availableHeight, 200); // Minimum 200px
      const newTop = topOffset;

      setPanelHeight(`${newHeight}px`);
      setPanelTop(`${newTop}px`);
      setPanelHeightValue(newHeight); // SayÄ±sal deÄŸeri gÃ¼nceller
      setPanelTopValue(newTop); // SayÄ±sal deÄŸeri gÃ¼nceller

      console.log('Panel position and height calculated:', {
        windowHeight: window.innerHeight,
        topOffset,
        bottomOffset,
        availableHeight,
        newHeight,
        newTop,
      });
    };

    // Ä°lk hesaplama
    calculatePanelPositionAndHeight();

    // Yeniden boyutlandÄ±rma olaylarÄ± iÃ§in gecikmeli hesaplama fonksiyonu
    let resizeTimeoutId: NodeJS.Timeout;
    const debouncedCalculate = () => {
      clearTimeout(resizeTimeoutId);
      resizeTimeoutId = setTimeout(calculatePanelPositionAndHeight, 50);
    };

    // Pencere yeniden boyutlandÄ±rma olay dinleyicisi
    window.addEventListener('resize', debouncedCalculate);

    // DOM deÄŸiÅŸikliklerini izlemek iÃ§in MutationObserver (terminal geniÅŸletme/daraltma gibi)
    const observer = new MutationObserver(debouncedCalculate);
    observer.observe(document.body, {
      childList: true,
      subtree: true,
      attributes: true,
      attributeFilter: ['class', 'style'], // SÄ±nÄ±f ve stil deÄŸiÅŸikliklerini izler
    });

    // Temizleme
    return () => {
      clearTimeout(resizeTimeoutId);
      window.removeEventListener('resize', debouncedCalculate);
      observer.disconnect();
    };
  }, []); // BoÅŸ baÄŸÄ±mlÄ±lÄ±k dizisi, bu fonksiyonun sadece baÄŸlandÄ±ÄŸÄ±nda bir kez Ã§alÄ±ÅŸÄ±p ayrÄ±ldÄ±ÄŸÄ±nda temizleneceÄŸi anlamÄ±na gelir


  const handleClose = () => {
    setActiveComponent(null);
    setIsAddPanelMode(false);
    setIsPanelEditMode(false); // Panel dÃ¼zenleme modunu sÄ±fÄ±rlar
    onExit();
  };

  const handleComponentClick = (componentType: string) => {
    // BileÅŸen modunu deÄŸiÅŸtir
    if (activeComponent === componentType) {
      setActiveComponent(null);
      setIsAddPanelMode(false);
      setIsPanelEditMode(false); // Panel dÃ¼zenleme modunu sÄ±fÄ±rlar
      console.log(`${componentType} modu devre dÄ±ÅŸÄ± bÄ±rakÄ±ldÄ±`);
    } else {
      setActiveComponent(componentType);

      // FarklÄ± bileÅŸen tipleri iÃ§in Ã¶zel iÅŸlem
      if (componentType === 'panels') {
        setIsAddPanelMode(true);
        setIsPanelEditMode(false);
        console.log('Panel modu etkinleÅŸtirildi - Panel eklemek iÃ§in yÃ¼zeylere tÄ±klayÄ±n');
      } else if (componentType === 'panel-edit') {
        // Panel DÃ¼zenleme Modu
        setIsAddPanelMode(false);
        setIsPanelEditMode(true);
        console.log('Panel DÃ¼zenleme modu etkinleÅŸtirildi - BoyutlarÄ± dÃ¼zenlemek iÃ§in panellere tÄ±klayÄ±n');
      } else {
        setIsAddPanelMode(false);
        setIsPanelEditMode(false);
        console.log(`${componentType} modu etkinleÅŸtirildi`);
      }
    }
  };

  const getShapeIcon = () => {
    switch (editedShape.type) {
      case 'box':
        return <Box size={14} className="text-blue-400" />;
      case 'cylinder':
        return <Cylinder size={14} className="text-teal-400" />;
      default:
        return <Box size={14} className="text-orange-400" />;
    }
  };

  // Mobilya bileÅŸen butonlarÄ± yapÄ±landÄ±rmasÄ±
  const furnitureComponents = [
    {
      id: 'panels',
      icon: <Layers size={12} />,
      color: 'blue',
      description: 'Panel Ekle - Panel eklemek iÃ§in yÃ¼zeylere tÄ±klayÄ±n',
    },
    {
      id: 'panel-edit',
      icon: <Edit3 size={12} />,
      color: 'red',
      description: 'Panel DÃ¼zenle - BoyutlarÄ± dÃ¼zenlemek iÃ§in panellere tÄ±klayÄ±n',
    },
    {
      id: 'module',
      icon: <Puzzle size={12} />,
      color: 'violet',
      description: 'ModÃ¼l Bilgileri - BoyutlarÄ± ve Ã¶zellikleri gÃ¶rÃ¼ntÃ¼le',
    },
    {
      id: 'shelves',
      icon: <Shelf size={12} />,
      color: 'green',
      description: 'Raf Ekle - Yatay raflar ekleyin',
    },
    {
      id: 'backs',
      icon: <Package size={12} />,
      color: 'purple',
      description: 'ArkalÄ±k Ekle - Arka paneller ekleyin',
    },
    {
      id: 'doors',
      icon: <DoorOpen size={12} />,
      color: 'orange',
      description: 'KapÄ± Ekle - Dolap kapaklarÄ± ekleyin',
    },
    {
      id: 'edgeband',
      icon: <RectangleHorizontal size={12} />,
      color: 'amber',
      description: 'Kenar BandÄ± Ekle - Kenar bandÄ± ekleyin',
    },
    {
      id: 'drawer',
      icon: <Minus size={12} />,
      color: 'indigo',
      description: 'Ã‡ekmece Ekle - Ã‡ekmeceler ekleyin',
    },
    {
      id: 'hinge',
      icon: <Zap size={12} />,
      color: 'cyan',
      description: 'MenteÅŸe Ekle - MenteÅŸeler ekleyin',
    },
    {
      id: 'divider',
      icon: <Grid3X3 size={12} />,
      color: 'pink',
      description: 'BÃ¶lÃ¼cÃ¼ Ekle - BÃ¶lÃ¼cÃ¼ler ekleyin',
    },
    {
      id: 'notch',
      icon: <Scissors size={12} />,
      color: 'teal',
      description: 'Ã‡entik Ekle - Ã‡entikler ekleyin',
    },
    {
      id: 'accessories',
      icon: <Settings size={12} />,
      color: 'slate',
      description: 'Aksesuar Ekle - DonanÄ±m ve aksesuarlar ekleyin',
    },
    {
      id: 'local-params',
      icon: <Sliders size={12} />,
      color: 'emerald',
      description: 'Yerel Parametreler - Yerel parametreleri dÃ¼zenleyin',
    },
  ];

  const getIconButtonColorClasses = (color: string, isActive: boolean) => {
    const baseClasses =
      'relative flex items-center rounded-lg transition-all duration-200 hover:scale-[1.02] active:scale-[0.98]';

    if (isActive) {
      switch (color) {
        case 'blue':
          return `${baseClasses} bg-blue-600/90 text-white shadow-lg shadow-blue-500/25 border border-blue-400/30`;
        case 'red':
          return `${baseClasses} bg-red-600/90 text-white shadow-lg shadow-red-500/25 border border-red-400/30`;
        case 'green':
          return `${baseClasses} bg-green-600/90 text-white shadow-lg shadow-green-500/25 border border-green-400/30`;
        case 'purple':
          return `${baseClasses} bg-purple-600/90 text-white shadow-lg shadow-purple-500/25 border border-purple-400/30`;
        case 'orange':
          return `${baseClasses} bg-orange-600/90 text-white shadow-lg shadow-orange-500/25 border border-orange-400/30`;
        case 'amber':
          return `${baseClasses} bg-amber-600/90 text-white shadow-lg shadow-amber-500/25 border border-amber-400/30`;
        case 'indigo':
          return `${baseClasses} bg-indigo-600/90 text-white shadow-lg shadow-indigo-500/25 border border-indigo-400/30`;
        case 'cyan':
          return `${baseClasses} bg-cyan-600/90 text-white shadow-lg shadow-cyan-500/25 border border-cyan-400/30`;
        case 'pink':
          return `${baseClasses} bg-pink-600/90 text-white shadow-lg shadow-pink-500/25 border border-pink-400/30`;
        case 'teal':
          return `${baseClasses} bg-teal-600/90 text-white shadow-lg shadow-teal-500/25 border border-teal-400/30`;
        case 'slate':
          return `${baseClasses} bg-slate-600/90 text-white shadow-lg shadow-slate-500/25 border border-slate-400/30`;
        case 'emerald':
          return `${baseClasses} bg-emerald-600/90 text-white shadow-lg shadow-emerald-500/25 border border-emerald-400/30`;
        case 'violet':
          return `${baseClasses} bg-violet-600/90 text-white shadow-lg shadow-violet-500/25 border border-violet-400/30`;
        default:
          return `${baseClasses} bg-gray-600/90 text-white shadow-lg shadow-gray-500/25 border border-gray-400/30`;
      }
    } else {
      // Pasif durum iÃ§in genel gri renk temasÄ±
      return `${baseClasses} bg-gray-800/50 text-gray-300 hover:bg-gray-600/50 border border-gray-500/30 hover:border-gray-400/50`;
    }
  };

  // Panel geniÅŸliÄŸini duruma gÃ¶re belirler
  const getPanelWidthClass = () => {
    // Collapsed mod kontrolÃ¼
    if (isCollapsed) {
      return 'w-8'; // Ultra dar - sadece collapse dÃ¼ÄŸmesi
    }
    
    // Normal mod - sadece buton modu
    return 'w-48';
  };

  return (
    <>
      {/* Ana DÃ¼zenleme Paneli */}
      <div
        className={`fixed left-0 z-50 ${getPanelWidthClass()} bg-gray-800/95 backdrop-blur-sm border-r border-gray-700/50 shadow-lg flex flex-col
          transition-all duration-300 ease-in-out`}
        style={{
          top: panelTop,
          height: panelHeight,
        }}
      >
        {/* BaÅŸlÄ±k */}

        {/* Collapse DÃ¼ÄŸmesi - Collapsed modda gÃ¶rÃ¼nÃ¼r */}
        {isCollapsed && (
          <div className="flex items-center justify-center p-2 h-full">
            <button
              onClick={() => setIsCollapsed(false)}
              className="text-gray-400 hover:text-white p-2 rounded transition-colors hover:bg-gray-700/50"
              title="Paneli GeniÅŸlet"
            >
              <ChevronRight size={16} />
            </button>
          </div>
        )}

        {/* Ä°Ã§erik - Sol (butonlar) ve SaÄŸ (boyutlar/diÄŸer) olarak bÃ¶lÃ¼nmÃ¼ÅŸ */}
        <div className={`flex-1 flex flex-row overflow-hidden ${isCollapsed ? 'hidden' : ''}`}>
          {/* BileÅŸen MenÃ¼ Ã‡ubuÄŸu - Tam geniÅŸlik */}
          <div className="flex flex-col w-full bg-gray-700/50 flex-shrink-0 py-2 overflow-y-auto" style={{ scrollbarWidth: 'thin' }}>
            {editedShape.type === 'box' && (
              <div className="flex flex-col gap-1 px-2">
                {furnitureComponents.map((component) => {
                  const isActive = activeComponent === component.id;
                  return (
                    <button
                      key={component.id}
                      onClick={() => handleComponentClick(component.id)}
                      className={`${getIconButtonColorClasses(component.color, isActive)} w-full justify-start gap-2 px-2 py-1.5 text-left`}
                      title={component.description}
                    >
                      <div className="flex-shrink-0">
                        {React.cloneElement(component.icon, { size: 12 })}
                      </div>
                      <span className="text-xs font-medium truncate">
                        {component.id === 'panels' && 'Paneller'}
                        {component.id === 'panel-edit' && 'Panel DÃ¼zenle'}
                        {component.id === 'module' && 'ModÃ¼l'}
                        {component.id === 'shelves' && 'Raflar'}
                        {component.id === 'backs' && 'ArkalÄ±klar'}
                        {component.id === 'doors' && 'KapÄ±lar'}
                        {component.id === 'edgeband' && 'Kenar BandÄ±'}
                        {component.id === 'drawer' && 'Ã‡ekmece'}
                        {component.id === 'hinge' && 'MenteÅŸe'}
                        {component.id === 'divider' && 'BÃ¶lÃ¼cÃ¼'}
                        {component.id === 'notch' && 'Ã‡entik'}
                        {component.id === 'accessories' && 'Aksesuarlar'}
                        {component.id === 'local-params' && 'Parametreler'}
                      </span>
                      {isActive && (
                        <div className="absolute top-0 right-0 w-3 h-3 bg-white rounded-full flex items-center justify-center">
                          <div className="w-1.5 h-1.5 bg-green-500 rounded-full"></div>
                        </div>
                      )}
                    </button>
                  );
                })}
              </div>
            )}
          </div>
        </div>

        {/* ModÃ¼l Bilgileri - Panelin altÄ±nda geniÅŸletilir */}
        {activeComponent === 'module' && (
          <div className="border-t border-gray-600/30 bg-gray-700/30">
            <ModuleExpandedSection editedShape={editedShape} />
          </div>
        )}

        {/* Paneller BÃ¶lÃ¼mÃ¼ */}
        {activeComponent === 'panels' && (
          <div className="border-t border-gray-600/30 bg-gray-700/30">
            <PanelsExpandedSection selectedFaces={selectedFaces} />
          </div>
        )}

        {/* Panel DÃ¼zenleme BÃ¶lÃ¼mÃ¼ */}
        {activeComponent === 'panel-edit' && (
          <div className="border-t border-gray-600/30 bg-gray-700/30">
            <PanelEditExpandedSection selectedFaces={selectedFaces} />
          </div>
        )}

        {/* Raflar BÃ¶lÃ¼mÃ¼ */}
        {activeComponent === 'shelves' && (
          <div className="border-t border-gray-600/30 bg-gray-700/30">
            <ShelvesExpandedSection />
          </div>
        )}

        {/* ArkalÄ±klar BÃ¶lÃ¼mÃ¼ */}
        {activeComponent === 'backs' && (
          <div className="border-t border-gray-600/30 bg-gray-700/30">
            <BacksExpandedSection />
          </div>
        )}

        {/* KapÄ±lar BÃ¶lÃ¼mÃ¼ */}
        {activeComponent === 'doors' && (
          <div className="border-t border-gray-600/30 bg-gray-700/30">
            <DoorsExpandedSection />
          </div>
        )}

        {/* Kenar BandÄ± BÃ¶lÃ¼mÃ¼ */}
        {activeComponent === 'edgeband' && (
          <div className="border-t border-gray-600/30 bg-gray-700/30">
            <EdgebandExpandedSection />
          </div>
        )}

        {/* Ã‡ekmece BÃ¶lÃ¼mÃ¼ */}
        {activeComponent === 'drawer' && (
          <div className="border-t border-gray-600/30 bg-gray-700/30">
            <DrawerExpandedSection />
          </div>
        )}

        {/* MenteÅŸe BÃ¶lÃ¼mÃ¼ */}
        {activeComponent === 'hinge' && (
          <div className="border-t border-gray-600/30 bg-gray-700/30">
            <HingeExpandedSection />
          </div>
        )}

        {/* BÃ¶lÃ¼cÃ¼ BÃ¶lÃ¼mÃ¼ */}
        {activeComponent === 'divider' && (
          <div className="border-t border-gray-600/30 bg-gray-700/30">
            <DividerExpandedSection />
          </div>
        )}

        {/* Ã‡entik BÃ¶lÃ¼mÃ¼ */}
        {activeComponent === 'notch' && (
          <div className="border-t border-gray-600/30 bg-gray-700/30">
            <NotchExpandedSection />
          </div>
        )}

        {/* Aksesuarlar BÃ¶lÃ¼mÃ¼ */}
        {activeComponent === 'accessories' && (
          <div className="border-t border-gray-600/30 bg-gray-700/30">
            <AccessoriesExpandedSection />
          </div>
        )}

        {/* Yerel Parametreler BÃ¶lÃ¼mÃ¼ */}
        {activeComponent === 'local-params' && (
          <div className="border-t border-gray-600/30 bg-gray-700/30">
            <LocalParamsExpandedSection />
          </div>
        )}
        {/* Alt Bilgi - Her zaman altta */}
        <div className={`flex-shrink-0 px-2 py-1 border-t border-gray-600/30 bg-gray-700/30 ${isCollapsed ? 'hidden' : ''}`}>
          {/* Collapse dÃ¼ÄŸmesi */}
          <div className="flex justify-between items-center">
            {/* Kapat butonu */}
            <button
              onClick={handleClose}
              className="text-gray-400 hover:text-red-400 p-1 rounded transition-colors"
              title="DÃ¼zenleme Modundan Ã‡Ä±k"
            >
              <X size={10} />
            </button>
            
            {/* Collapse dÃ¼ÄŸmesi */}
            <button
              onClick={() => setIsCollapsed(true)}
              className="text-gray-400 hover:text-white p-1 rounded transition-colors"
              title="ArayÃ¼zÃ¼ KÃ¼Ã§Ã¼lt"
            >
              <ChevronLeft size={10} />
            </button>
          </div>
        </div>
      </div>

      {/* DaraltÄ±lmÄ±ÅŸ panel iÃ§in yeni dÃ¼ÄŸme - artÄ±k kullanÄ±lmÄ±yor */}
      {/* {isCollapsed && (
        <button
          onClick={() => setIsCollapsed(false)} // GeniÅŸletmek iÃ§in false yapar
          className="fixed left-0 z-50 w-6 h-12 flex items-center justify-center bg-gray-800/95 backdrop-blur-sm border-r border-gray-700/50 shadow-lg text-gray-400 hover:text-white hover:bg-gray-700/50 transition-colors rounded-r"
          title="DÃ¼zenleme Panelini GeniÅŸlet"
          style={{ top: `${panelTopValue + panelHeightValue / 2 - 24}px` }} // Panelin alanÄ±na gÃ¶re dikeyde ortalar
        >
          <ChevronRight size={14} />
        </button>
      )} */}

    </>
  );
};

// Paneller geniÅŸletilmiÅŸ bÃ¶lÃ¼m bileÅŸeni
const PanelsExpandedSection: React.FC<{ selectedFaces: number[] }> = ({ selectedFaces }) => {
  const faceNames = ['Ã–n', 'Arka', 'Ãœst', 'Alt', 'SaÄŸ', 'Sol'];
  
  return (
    <div className="p-2 space-y-2 text-gray-200">
      {/* Ana Aksiyon ButonlarÄ± */}
      <div className="grid grid-cols-1 gap-1">
        <button className="w-full bg-blue-600/90 hover:bg-blue-500 text-white text-xs py-2 px-3 rounded transition-colors font-medium">
          Panel Ekle
        </button>
        <button className="w-full bg-green-600/90 hover:bg-green-500 text-white text-xs py-2 px-3 rounded transition-colors font-medium">
          TÃ¼m Panelleri Ekle
        </button>
        <button className="w-full bg-red-600/90 hover:bg-red-500 text-white text-xs py-2 px-3 rounded transition-colors font-medium">
          Panelleri Temizle
        </button>
      </div>
      
      {/* SeÃ§ili Paneller */}
      {selectedFaces.length > 0 && (
        <div className="space-y-1">
          <div className="text-xs text-gray-400 font-medium">SeÃ§ili ({selectedFaces.length})</div>
          {selectedFaces.map((faceIndex) => (
            <div key={faceIndex} className="flex justify-between items-center bg-green-600/20 rounded px-2 py-1 text-xs border border-green-500/30">
              <span className="text-green-300">{faceNames[faceIndex]}</span>
              <span className="text-green-400 font-mono">18mm</span>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

// Panel DÃ¼zenleme geniÅŸletilmiÅŸ bÃ¶lÃ¼m bileÅŸeni
const PanelEditExpandedSection: React.FC<{ selectedFaces: number[] }> = ({ selectedFaces }) => {
  return (
    <div className="p-2 space-y-2 text-gray-200">
      {/* Ana Aksiyon ButonlarÄ± */}
      <div className="grid grid-cols-1 gap-1">
        <button className="w-full bg-red-600/90 hover:bg-red-500 text-white text-xs py-2 px-3 rounded transition-colors font-medium">
          Boyut DÃ¼zenle
        </button>
        <button className="w-full bg-orange-600/90 hover:bg-orange-500 text-white text-xs py-2 px-3 rounded transition-colors font-medium">
          Pozisyon DÃ¼zenle
        </button>
        <button className="w-full bg-purple-600/90 hover:bg-purple-500 text-white text-xs py-2 px-3 rounded transition-colors font-medium">
          Malzeme DeÄŸiÅŸtir
        </button>
      </div>
      
      {/* DÃ¼zenlenebilir Paneller */}
      {selectedFaces.length > 0 && (
        <div className="text-xs text-red-400 bg-red-600/10 rounded px-2 py-1 border border-red-500/30">
          {selectedFaces.length} panel dÃ¼zenlenebilir
        </div>
      )}
    </div>
  );
};

// Raflar geniÅŸletilmiÅŸ bÃ¶lÃ¼m bileÅŸeni
const ShelvesExpandedSection: React.FC = () => {
  return (
    <div className="p-2 space-y-2 text-gray-200">
      {/* Ana Aksiyon ButonlarÄ± */}
      <div className="grid grid-cols-1 gap-1">
        <button className="w-full bg-green-600/90 hover:bg-green-500 text-white text-xs py-2 px-3 rounded transition-colors font-medium">
          Sabit Raf Ekle
        </button>
        <button className="w-full bg-blue-600/90 hover:bg-blue-500 text-white text-xs py-2 px-3 rounded transition-colors font-medium">
          Ayarlanabilir Raf
        </button>
        <button className="w-full bg-cyan-600/90 hover:bg-cyan-500 text-white text-xs py-2 px-3 rounded transition-colors font-medium">
          Raf AyarlarÄ±
        </button>
      </div>
    </div>
  );
};

// ArkalÄ±klar geniÅŸletilmiÅŸ bÃ¶lÃ¼m bileÅŸeni
const BacksExpandedSection: React.FC = () => {
  return (
    <div className="p-2 space-y-2 text-gray-200">
      {/* Ana Aksiyon ButonlarÄ± */}
      <div className="grid grid-cols-1 gap-1">
        <button className="w-full bg-purple-600/90 hover:bg-purple-500 text-white text-xs py-2 px-3 rounded transition-colors font-medium">
          Sunta ArkalÄ±k (3mm)
        </button>
        <button className="w-full bg-indigo-600/90 hover:bg-indigo-500 text-white text-xs py-2 px-3 rounded transition-colors font-medium">
          MDF ArkalÄ±k (6mm)
        </button>
        <button className="w-full bg-violet-600/90 hover:bg-violet-500 text-white text-xs py-2 px-3 rounded transition-colors font-medium">
          ArkalÄ±k AyarlarÄ±
        </button>
      </div>
    </div>
  );
};

// KapÄ±lar geniÅŸletilmiÅŸ bÃ¶lÃ¼m bileÅŸeni
const DoorsExpandedSection: React.FC = () => {
  return (
    <div className="p-2 space-y-2 text-gray-200">
      {/* Ana Aksiyon ButonlarÄ± */}
      <div className="grid grid-cols-1 gap-1">
        <button className="w-full bg-orange-600/90 hover:bg-orange-500 text-white text-xs py-2 px-3 rounded transition-colors font-medium">
          Tek KapÄ± Ekle
        </button>
        <button className="w-full bg-red-600/90 hover:bg-red-500 text-white text-xs py-2 px-3 rounded transition-colors font-medium">
          Ã‡ift KapÄ± Ekle
        </button>
        <button className="w-full bg-amber-600/90 hover:bg-amber-500 text-white text-xs py-2 px-3 rounded transition-colors font-medium">
          KapÄ± AyarlarÄ±
        </button>
      </div>
    </div>
  );
};

// Kenar BandÄ± geniÅŸletilmiÅŸ bÃ¶lÃ¼m bileÅŸeni
const EdgebandExpandedSection: React.FC = () => {
  return (
    <div className="p-3 space-y-3 text-gray-200">
      <div className="space-y-2">
        <div className="text-xs text-gray-400 font-medium">Kenar BandÄ± TÃ¼rÃ¼</div>
        <div className="space-y-1">
          <button className="w-full text-left bg-amber-600/20 rounded px-2 py-1 text-xs text-amber-300 hover:bg-amber-600/30 border border-amber-500/30">
            + PVC Kenar BandÄ±
          </button>
          <button className="w-full text-left bg-yellow-600/20 rounded px-2 py-1 text-xs text-yellow-300 hover:bg-yellow-600/30 border border-yellow-500/30">
            + ABS Kenar BandÄ±
          </button>
        </div>
      </div>
      
      <div className="space-y-2">
        <div className="text-xs text-gray-400 font-medium">Kenar SeÃ§imi</div>
        <div className="space-y-1">
          <div className="flex justify-between items-center bg-gray-700/30 rounded px-2 py-1 text-xs">
            <span className="text-gray-300">KalÄ±nlÄ±k:</span>
            <span className="text-white font-mono">0.4 mm</span>
          </div>
          <div className="flex justify-between items-center bg-gray-700/30 rounded px-2 py-1 text-xs">
            <span className="text-gray-300">Renk:</span>
            <span className="text-white font-mono">Beyaz</span>
          </div>
        </div>
      </div>
    </div>
  );
};

// Ã‡ekmece geniÅŸletilmiÅŸ bÃ¶lÃ¼m bileÅŸeni
const DrawerExpandedSection: React.FC = () => {
  return (
    <div className="p-3 space-y-3 text-gray-200">
      <div className="space-y-2">
        <div className="text-xs text-gray-400 font-medium">Ã‡ekmece TÃ¼rÃ¼</div>
        <div className="space-y-1">
          <button className="w-full text-left bg-indigo-600/20 rounded px-2 py-1 text-xs text-indigo-300 hover:bg-indigo-600/30 border border-indigo-500/30">
            + Standart Ã‡ekmece
          </button>
          <button className="w-full text-left bg-blue-600/20 rounded px-2 py-1 text-xs text-blue-300 hover:bg-blue-600/30 border border-blue-500/30">
            + Derin Ã‡ekmece
          </button>
        </div>
      </div>
      
      <div className="space-y-2">
        <div className="text-xs text-gray-400 font-medium">Ray Sistemi</div>
        <div className="space-y-1">
          <div className="flex justify-between items-center bg-gray-700/30 rounded px-2 py-1 text-xs">
            <span className="text-gray-300">Tip:</span>
            <span className="text-white font-mono">Soft Close</span>
          </div>
          <div className="flex justify-between items-center bg-gray-700/30 rounded px-2 py-1 text-xs">
            <span className="text-gray-300">Uzunluk:</span>
            <span className="text-white font-mono">450 mm</span>
          </div>
        </div>
      </div>
    </div>
  );
};

// MenteÅŸe geniÅŸletilmiÅŸ bÃ¶lÃ¼m bileÅŸeni
const HingeExpandedSection: React.FC = () => {
  return (
    <div className="p-3 space-y-3 text-gray-200">
      <div className="space-y-2">
        <div className="text-xs text-gray-400 font-medium">MenteÅŸe TÃ¼rÃ¼</div>
        <div className="space-y-1">
          <button className="w-full text-left bg-cyan-600/20 rounded px-2 py-1 text-xs text-cyan-300 hover:bg-cyan-600/30 border border-cyan-500/30">
            + Gizli MenteÅŸe
          </button>
          <button className="w-full text-left bg-teal-600/20 rounded px-2 py-1 text-xs text-teal-300 hover:bg-teal-600/30 border border-teal-500/30">
            + Soft Close MenteÅŸe
          </button>
        </div>
      </div>
      
      <div className="space-y-2">
        <div className="text-xs text-gray-400 font-medium">MenteÅŸe AyarlarÄ±</div>
        <div className="space-y-1">
          <div className="flex justify-between items-center bg-gray-700/30 rounded px-2 py-1 text-xs">
            <span className="text-gray-300">AÃ§Ä±lÄ±ÅŸ AÃ§Ä±sÄ±:</span>
            <span className="text-white font-mono">110Â°</span>
          </div>
          <div className="flex justify-between items-center bg-gray-700/30 rounded px-2 py-1 text-xs">
            <span className="text-gray-300">Adet:</span>
            <span className="text-white font-mono">2</span>
          </div>
        </div>
      </div>
    </div>
  );
};

// BÃ¶lÃ¼cÃ¼ geniÅŸletilmiÅŸ bÃ¶lÃ¼m bileÅŸeni
const DividerExpandedSection: React.FC = () => {
  return (
    <div className="p-3 space-y-3 text-gray-200">
      <div className="space-y-2">
        <div className="text-xs text-gray-400 font-medium">BÃ¶lÃ¼cÃ¼ TÃ¼rÃ¼</div>
        <div className="space-y-1">
          <button className="w-full text-left bg-pink-600/20 rounded px-2 py-1 text-xs text-pink-300 hover:bg-pink-600/30 border border-pink-500/30">
            + Dikey BÃ¶lÃ¼cÃ¼
          </button>
          <button className="w-full text-left bg-rose-600/20 rounded px-2 py-1 text-xs text-rose-300 hover:bg-rose-600/30 border border-rose-500/30">
            + Yatay BÃ¶lÃ¼cÃ¼
          </button>
        </div>
      </div>
      
      <div className="space-y-2">
        <div className="text-xs text-gray-400 font-medium">BÃ¶lÃ¼cÃ¼ AyarlarÄ±</div>
        <div className="space-y-1">
          <div className="flex justify-between items-center bg-gray-700/30 rounded px-2 py-1 text-xs">
            <span className="text-gray-300">KalÄ±nlÄ±k:</span>
            <span className="text-white font-mono">18 mm</span>
          </div>
          <div className="flex justify-between items-center bg-gray-700/30 rounded px-2 py-1 text-xs">
            <span className="text-gray-300">Pozisyon:</span>
            <span className="text-white font-mono">Orta</span>
          </div>
        </div>
      </div>
    </div>
  );
};

// Ã‡entik geniÅŸletilmiÅŸ bÃ¶lÃ¼m bileÅŸeni
const NotchExpandedSection: React.FC = () => {
  return (
    <div className="p-3 space-y-3 text-gray-200">
      <div className="space-y-2">
        <div className="text-xs text-gray-400 font-medium">Ã‡entik TÃ¼rÃ¼</div>
        <div className="space-y-1">
          <button className="w-full text-left bg-teal-600/20 rounded px-2 py-1 text-xs text-teal-300 hover:bg-teal-600/30 border border-teal-500/30">
            + DikdÃ¶rtgen Ã‡entik
          </button>
          <button className="w-full text-left bg-emerald-600/20 rounded px-2 py-1 text-xs text-emerald-300 hover:bg-emerald-600/30 border border-emerald-500/30">
            + Yuvarlak Ã‡entik
          </button>
        </div>
      </div>
      
      <div className="space-y-2">
        <div className="text-xs text-gray-400 font-medium">Ã‡entik BoyutlarÄ±</div>
        <div className="space-y-1">
          <div className="flex justify-between items-center bg-gray-700/30 rounded px-2 py-1 text-xs">
            <span className="text-gray-300">G:</span>
            <span className="text-white font-mono">35 mm</span>
          </div>
          <div className="flex justify-between items-center bg-gray-700/30 rounded px-2 py-1 text-xs">
            <span className="text-gray-300">D:</span>
            <span className="text-white font-mono">18 mm</span>
          </div>
        </div>
      </div>
    </div>
  );
};

// Aksesuarlar geniÅŸletilmiÅŸ bÃ¶lÃ¼m bileÅŸeni
const AccessoriesExpandedSection: React.FC = () => {
  return (
    <div className="p-3 space-y-3 text-gray-200">
      <div className="space-y-2">
        <div className="text-xs text-gray-400 font-medium">DonanÄ±m</div>
        <div className="space-y-1">
          <button className="w-full text-left bg-slate-600/20 rounded px-2 py-1 text-xs text-slate-300 hover:bg-slate-600/30 border border-slate-500/30">
            + Kulp Ekle
          </button>
          <button className="w-full text-left bg-gray-600/20 rounded px-2 py-1 text-xs text-gray-300 hover:bg-gray-600/30 border border-gray-500/30">
            + Kilit Ekle
          </button>
        </div>
      </div>
      
      <div className="space-y-2">
        <div className="text-xs text-gray-400 font-medium">Ä°Ã§ Aksesuarlar</div>
        <div className="space-y-1">
          <button className="w-full text-left bg-zinc-600/20 rounded px-2 py-1 text-xs text-zinc-300 hover:bg-zinc-600/30 border border-zinc-500/30">
            + Raf DesteÄŸi
          </button>
          <button className="w-full text-left bg-stone-600/20 rounded px-2 py-1 text-xs text-stone-300 hover:bg-stone-600/30 border border-stone-500/30">
            + Kablo GeÃ§iÅŸi
          </button>
        </div>
      </div>
    </div>
  );
};

// Yerel Parametreler geniÅŸletilmiÅŸ bÃ¶lÃ¼m bileÅŸeni
const LocalParamsExpandedSection: React.FC = () => {
  return (
    <div className="p-3 space-y-3 text-gray-200">
      <div className="space-y-2">
        <div className="text-xs text-gray-400 font-medium">Ã–zel Parametreler</div>
        <div className="space-y-1">
          <div className="flex justify-between items-center bg-gray-700/30 rounded px-2 py-1 text-xs">
            <span className="text-gray-300">Panel KalÄ±nlÄ±ÄŸÄ±:</span>
            <span className="text-white font-mono">18 mm</span>
          </div>
          <div className="flex justify-between items-center bg-gray-700/30 rounded px-2 py-1 text-xs">
            <span className="text-gray-300">Kenar Mesafesi:</span>
            <span className="text-white font-mono">32 mm</span>
          </div>
          <div className="flex justify-between items-center bg-gray-700/30 rounded px-2 py-1 text-xs">
            <span className="text-gray-300">Vida Ã‡apÄ±:</span>
            <span className="text-white font-mono">5 mm</span>
          </div>
        </div>
      </div>
      
      <div className="space-y-2">
        <div className="text-xs text-gray-400 font-medium">Malzeme AyarlarÄ±</div>
        <div className="space-y-1">
          <div className="flex justify-between items-center bg-gray-700/30 rounded px-2 py-1 text-xs">
            <span className="text-gray-300">Ana Malzeme:</span>
            <span className="text-white font-mono">Lam</span>
          </div>
          <div className="flex justify-between items-center bg-gray-700/30 rounded px-2 py-1 text-xs">
            <span className="text-gray-300">Kenar BandÄ±:</span>
            <span className="text-white font-mono">PVC</span>
          </div>
        </div>
      </div>
    </div>
  );
};

// ModÃ¼l geniÅŸletilmiÅŸ bÃ¶lÃ¼m bileÅŸeni
const ModuleExpandedSection: React.FC<{ editedShape: Shape }> = ({ editedShape }) => {
  const { measurementUnit, convertToDisplayUnit } = useAppStore();
  
  const getDimensionValue = (paramName: string) => {
    const value = editedShape.parameters[paramName];
    return value ? convertToDisplayUnit(value).toFixed(1) : '0.0';
  };

  return (
    <div className="p-2 space-y-2 text-gray-200">
      {/* Ana Aksiyon ButonlarÄ± */}
      <div className="grid grid-cols-1 gap-1">
        <button className="w-full bg-violet-600/90 hover:bg-violet-500 text-white text-xs py-2 px-3 rounded transition-colors font-medium">
          Boyut DÃ¼zenle
        </button>
        <button className="w-full bg-blue-600/90 hover:bg-blue-500 text-white text-xs py-2 px-3 rounded transition-colors font-medium">
          Pozisyon DÃ¼zenle
        </button>
        <button className="w-full bg-green-600/90 hover:bg-green-500 text-white text-xs py-2 px-3 rounded transition-colors font-medium">
          ModÃ¼l Kopyala
        </button>
      </div>

      {/* Boyutlar */}
      <div className="space-y-1">
        <div className="text-xs text-gray-400 font-medium">Mevcut Boyutlar</div>
        {editedShape.type === 'box' && (
          <div className="space-y-1">
            <div className="flex justify-between items-center bg-gray-700/30 rounded px-2 py-1 text-xs">
              <span className="text-gray-300">G:</span>
              <span className="text-white font-mono">
                {getDimensionValue('width')} {measurementUnit}
              </span>
            </div>
            <div className="flex justify-between items-center bg-gray-700/30 rounded px-2 py-1 text-xs">
              <span className="text-gray-300">Y:</span>
              <span className="text-white font-mono">
                {getDimensionValue('height')} {measurementUnit}
              </span>
            </div>
            <div className="flex justify-between items-center bg-gray-700/30 rounded px-2 py-1 text-xs">
              <span className="text-gray-300">D:</span>
              <span className="text-white font-mono">
                {getDimensionValue('depth')} {measurementUnit}
              </span>
            </div>
          </div>
        )}

        {editedShape.type === 'cylinder' && (
          <div className="space-y-1">
            <div className="flex justify-between items-center bg-gray-700/30 rounded px-2 py-1 text-xs">
              <span className="text-gray-300">R:</span>
              <span className="text-white font-mono">
                {getDimensionValue('radius')} {measurementUnit}
              </span>
            </div>
            <div className="flex justify-between items-center bg-gray-700/30 rounded px-2 py-1 text-xs">
              <span className="text-gray-300">Y:</span>
              <span className="text-white font-mono">
                {getDimensionValue('height')} {measurementUnit}
              </span>
            </div>
          </div>
        )}
      </div>

      {/* Pozisyon */}
      <div className="space-y-1">
        <div className="text-xs text-gray-400 font-medium">Mevcut Pozisyon</div>
        <div className="space-y-1">
          <div className="flex justify-between items-center bg-gray-700/30 rounded px-2 py-1 text-xs">
            <span className="text-gray-300">X:</span>
            <span className="text-white font-mono">
              {convertToDisplayUnit(editedShape.position[0]).toFixed(1)} {measurementUnit}
            </span>
          </div>
          <div className="flex justify-between items-center bg-gray-700/30 rounded px-2 py-1 text-xs">
            <span className="text-gray-300">Y:</span>
            <span className="text-white font-mono">
              {convertToDisplayUnit(editedShape.position[1]).toFixed(1)} {measurementUnit}
            </span>
          </div>
          <div className="flex justify-between items-center bg-gray-700/30 rounded px-2 py-1 text-xs">
            <span className="text-gray-300">Z:</span>
            <span className="text-white font-mono">
              {convertToDisplayUnit(editedShape.position[2]).toFixed(1)} {measurementUnit}
            </span>
          </div>
        </div>
      </div>

    </div>
  );
};

export default EditModePanel;