import React, { useMemo, useState, useCallback } from 'react';
import * as THREE from 'three';
import { Shape } from '../types/shapes';
import { ViewMode, useAppStore } from '../store/appStore';
import { createExtrudedPanelGeometry } from '../utils/geometryUtils'; // Yeni yardÄ±mcÄ± fonksiyonu import ettik

// NEW: Geometric face detection
interface GeometricFace {
  index: number;
  center: THREE.Vector3;
  normal: THREE.Vector3;
  area: number;
  vertices: THREE.Vector3[];
  bounds: THREE.Box3;
}

// NEW: Stored Panel data structure to hold detailed face info
interface StoredPanel {
  id: string; // Unique ID for the panel instance
  faceIndex: number;
  faceVertices: THREE.Vector3[]; // Vertices of the original face
  faceNormal: THREE.Vector3;    // Normal of the original face
  faceCenter: THREE.Vector3;    // Center of the original face
  panelOrder: number;
  // Panel'in kendi geometrisi ve transform bilgileri
  geometry: THREE.BufferGeometry;
  position: THREE.Vector3;
  rotation: THREE.Euler;
}

interface PanelManagerProps {
  shape: Shape;
  isAddPanelMode: boolean;
  selectedFaces: StoredPanel[]; // ArtÄ±k sadece index deÄŸil, StoredPanel objeleri tutacak
  hoveredFace: number | null;
  showEdges: boolean;
  showFaces: boolean;
  onFaceSelect: (panelData: StoredPanel) => void; // Callback'i gÃ¼ncelledik
  onFaceHover: (faceIndex: number | null) => void;
  alwaysShowPanels?: boolean;
  isPanelEditMode?: boolean;
  onPanelSelect?: (panelData: {
    faceIndex: number;
    position: THREE.Vector3;
    size: THREE.Vector3;
    panelOrder: number;
  }) => void;
  onShowFaceSelection?: (faces: GeometricFace[], position: { x: number; y: number }) => void;
  onHideFaceSelection?: () => void;
  onSelectFace?: (faceIndex: number) => void;
  onDynamicFaceSelect?: (faceIndex: number) => void;
  selectedDynamicFace?: number | null;
  isDynamicSelectionMode?: boolean;
}

const PanelManager: React.FC<PanelManagerProps> = ({
  shape,
  isAddPanelMode,
  selectedFaces, // ArtÄ±k StoredPanel dizisi
  hoveredFace,
  showEdges,
  showFaces,
  onFaceSelect,
  onFaceHover,
  alwaysShowPanels = false,
  isPanelEditMode = false,
  onPanelSelect,
  onShowFaceSelection,
  onHideFaceSelection,
  onSelectFace,
  onDynamicFaceSelect,
  selectedDynamicFace,
  isDynamicSelectionMode = false,
}) => {
  const panelThickness = 18; // 18mm panel thickness

  const { viewMode } = useAppStore();

  // NEW: Find closest face to a 3D point using geometric calculations
  // Bu fonksiyon artÄ±k dÄ±ÅŸarÄ±dan Ã§aÄŸrÄ±lmayacak, raycaster'dan gelen veriyi kullanacaÄŸÄ±z.
  // Ancak, face cycling iÃ§in hala bir mantÄ±k tutabiliriz.

  const woodMaterials = useMemo(() => {
    const textureLoader = new THREE.TextureLoader();

    const woodTexture = textureLoader.load(
      'https://images.pexels.com/photos/6757411/pexels-photo-6757411.jpeg'
    );
    woodTexture.wrapS = THREE.RepeatWrapping;
    woodTexture.wrapT = THREE.RepeatWrapping;
    woodTexture.repeat.set(0.64, 0.64);
    woodTexture.anisotropy = 8;

    const woodNormalMap = textureLoader.load(
      'https://images.pexels.com/photos/6757411/pexels-photo-6757411.jpeg'
    );
    woodNormalMap.wrapS = THREE.RepeatWrapping;
    woodNormalMap.wrapT = THREE.RepeatWrapping;
    woodNormalMap.repeat.set(0.6, 0.6);
    woodNormalMap.anisotropy = 108;

    const baseMaterialProps = {
      metalness: 0.02,
      roughness: 1.1,
      clearcoat: 0.4,
      clearcoatRoughness: 0.1,
      reflectivity: 0.1,
      envMapIntensity: 0.4,
      emissive: new THREE.Color(0x000000),
      emissiveIntensity: 0.0,
      side: THREE.DoubleSide,
      map: woodTexture,
      normalMap: woodNormalMap,
      normalScale: new THREE.Vector2(0.4, 0.4),
      color: new THREE.Color(0xf3f6f4),
      transparent: false,
      opacity: 1.0,
      alphaTest: 0,
      depthWrite: true,
      depthTest: true,
      premultipliedAlpha: false,
      vertexColors: false,
      fog: true,
      flatShading: false,
      iridescence: 0.0,
      iridescenceIOR: 1.0,
      sheen: 0.1,
      sheenRoughness: 0.9,
      sheenColor: new THREE.Color(0xffffff),
      specularIntensity: 0.3,
      specularColor: new THREE.Color(0xffffff),
      transmission: 0.0,
      thickness: 0.0,
      attenuationDistance: Infinity,
      attenuationColor: new THREE.Color(0xffffff),
      ior: 1.2,
    };

    const verticalMaterial = new THREE.MeshPhysicalMaterial(baseMaterialProps);

    const horizontalMaterial = new THREE.MeshPhysicalMaterial({
      ...baseMaterialProps,
      map: woodTexture.clone(),
      normalMap: woodNormalMap.clone(),
    });
    horizontalMaterial.map!.rotation = Math.PI / 2;
    horizontalMaterial.normalMap!.rotation = Math.PI / 2;

    return {
      vertical: verticalMaterial,
      horizontal: horizontalMaterial,
    };
  }, []);

  // Panelleri StoredPanel verisine gÃ¶re oluÅŸtur
  const smartPanelData = useMemo(() => {
    return selectedFaces.map((panelData) => {
      // createExtrudedPanelGeometry fonksiyonu, yÃ¼zeyin kÃ¶ÅŸelerini alarak
      // panel geometrisini ve konum/dÃ¶nÃ¼ÅŸ bilgilerini dÃ¶ndÃ¼recek.
      const { geometry, position, rotation } = createExtrudedPanelGeometry(
        panelData.faceVertices,
        panelData.faceNormal,
        panelThickness
      );

      return {
        ...panelData, // StoredPanel'deki tÃ¼m bilgileri koru
        geometry,
        position,
        rotation,
      };
    });
  }, [selectedFaces, panelThickness]);

  const getPanelMaterial = (faceIndex: number) => {
    // Burada panelin yÃ¶nÃ¼ne gÃ¶re materyal seÃ§imi hala geÃ§erli olabilir
    // Ancak daha dinamik paneller iÃ§in bu mantÄ±k deÄŸiÅŸebilir veya kaldÄ±rÄ±labilir.
    if (faceIndex === 2 || faceIndex === 3) { // Top/Bottom faces
      return woodMaterials.horizontal;
    }
    return woodMaterials.vertical; // Front/Back/Left/Right faces
  };

  const getPanelEdgeColor = () => {
    switch (viewMode) {
      case ViewMode.WIREFRAME:
        return '#ffffff'; // White edges in wireframe mode
      case ViewMode.TRANSPARENT:
        return '#000000'; // Black edges in transparent mode
      case ViewMode.SOLID:
        return '#2a2a2a'; // Dark gray in solid mode
      default:
        return '#2a2a2a';
    }
  };

  const getPanelEdgeLineWidth = () => {
    const screenWidth = window.innerWidth;
    if (screenWidth < 768) {
      return 1.0;
    } else if (screenWidth < 1024) {
      return 1.5;
    } else {
      return 2.0;
    }
  };

  // Dinamik yÃ¼zey seÃ§imi ve panel ekleme mantÄ±ÄŸÄ±
  const handleClick = useCallback((e: any, faceIndex: number, face: THREE.Face, object: THREE.Object3D) => {
    if (!isAddPanelMode) return;

    e.stopPropagation();

    // Raycaster'dan gelen yÃ¼zey bilgilerini kullanarak panel verisini oluÅŸtur
    const originalMesh = object as THREE.Mesh;
    const geometry = originalMesh.geometry as THREE.BufferGeometry;

    // YÃ¼zeyin kÃ¶ÅŸelerini al
    const positionAttribute = geometry.attributes.position;
    const vertices: THREE.Vector3[] = [];
    vertices.push(new THREE.Vector3().fromBufferAttribute(positionAttribute, face.a));
    vertices.push(new THREE.Vector3().fromBufferAttribute(positionAttribute, face.b));
    vertices.push(new THREE.Vector3().fromBufferAttribute(positionAttribute, face.c));

    // EÄŸer yÃ¼zey bir dÃ¶rtgen ise (genellikle kutu geometrilerinde olduÄŸu gibi)
    // d kÃ¶ÅŸesini de eklememiz gerekebilir. Ancak Three.js face objeleri Ã¼Ã§genleri temsil eder.
    // Daha karmaÅŸÄ±k ÅŸekiller iÃ§in, yÃ¼zeyin tÃ¼m kÃ¶ÅŸelerini doÄŸru bir ÅŸekilde Ã§Ä±karmak
    // iÃ§in daha geliÅŸmiÅŸ bir geometri iÅŸleme mantÄ±ÄŸÄ± gerekebilir.
    // Åžimdilik, Ã¼Ã§gen yÃ¼zeyler iÃ§in Ã§alÄ±ÅŸacak ÅŸekilde tasarlayalÄ±m.

    // YÃ¼zeyin normalini ve merkezini al
    const faceNormal = face.normal.clone();
    const faceCenter = new THREE.Vector3().addVectors(vertices[0], vertices[1]).add(vertices[2]).divideScalar(3);

    // Mesh'in dÃ¶nÃ¼ÅŸÃ¼nÃ¼ ve konumunu uygulayarak dÃ¼nya koordinatlarÄ±na Ã§evir
    originalMesh.updateMatrixWorld(true); // DÃ¼nya matrisini gÃ¼ncelle
    faceNormal.applyQuaternion(originalMesh.quaternion).normalize();
    faceCenter.applyMatrix4(originalMesh.matrixWorld);
    vertices.forEach(v => v.applyMatrix4(originalMesh.matrixWorld));


    if (e.nativeEvent.button === 0) { // Sol click - Cycle through faces
      // Bu kÄ±sÄ±m, Ã¼st Ã¼ste binen yÃ¼zeyler iÃ§in dÃ¶ngÃ¼sel seÃ§im mantÄ±ÄŸÄ±nÄ± iÃ§erir.
      // Åžimdilik, sadece tÄ±klanan yÃ¼zeyi seÃ§elim.
      // GerÃ§ek bir "cycle" iÃ§in, tÄ±klanan noktadaki tÃ¼m kesiÅŸimleri bulup
      // bunlar arasÄ±nda geÃ§iÅŸ yapma mantÄ±ÄŸÄ±na ihtiyaÃ§ vardÄ±r.
      // Basitlik adÄ±na, doÄŸrudan seÃ§ilen yÃ¼zeyi iÅŸleyelim.
      const newPanel: StoredPanel = {
        id: THREE.MathUtils.generateUUID(), // Benzersiz ID
        faceIndex: faceIndex,
        faceVertices: vertices,
        faceNormal: faceNormal,
        faceCenter: faceCenter,
        panelOrder: selectedFaces.length, // Mevcut panel sayÄ±sÄ±na gÃ¶re sÄ±ralama
        geometry: new THREE.BufferGeometry(), // Placeholder, useMemo'da oluÅŸturulacak
        position: new THREE.Vector3(),
        rotation: new THREE.Euler(),
      };
      onFaceSelect(newPanel); // SeÃ§ilen yÃ¼zeyin detaylarÄ±nÄ± gÃ¶nder
      console.log(`ðŸŽ¯ Panel added to face ${faceIndex} geometrically`);

    } else if (e.nativeEvent.button === 2) { // SaÄŸ click - Confirm panel placement
      // SaÄŸ tÄ±klama ile panel ekleme mantÄ±ÄŸÄ±, sol tÄ±klama ile aynÄ± olabilir
      // veya farklÄ± bir onay mekanizmasÄ± olarak kullanÄ±labilir.
      // Åžu an iÃ§in sol tÄ±klama ile doÄŸrudan ekliyoruz.
      e.nativeEvent.preventDefault(); // TarayÄ±cÄ±nÄ±n varsayÄ±lan saÄŸ tÄ±k menÃ¼sÃ¼nÃ¼ engelle
      console.log(`ðŸŽ¯ Right click on face ${faceIndex}`);
    }
  }, [isAddPanelMode, onFaceSelect, selectedFaces.length]);


  // Panel edit modu iÃ§in tÄ±klama iÅŸleyicisi
  const handlePanelMeshClick = useCallback((e: any, panelData: StoredPanel) => {
    if (isPanelEditMode && onPanelSelect) {
      e.stopPropagation();
      // Panel'in gerÃ§ek boyutunu ve konumunu hesaplayÄ±p gÃ¶nder
      const bbox = new THREE.Box3().setFromBufferAttribute(panelData.geometry.attributes.position);
      const size = new THREE.Vector3();
      bbox.getSize(size);

      // Panel'in ana ÅŸekle gÃ¶re gÃ¶receli konumu
      const relativePosition = panelData.position;

      onPanelSelect({
        faceIndex: panelData.faceIndex,
        position: relativePosition,
        size: size,
        panelOrder: panelData.panelOrder,
      });
      console.log(`ðŸ”´ Panel ${panelData.faceIndex} clicked for editing`);
    }
  }, [isPanelEditMode, onPanelSelect]);


  const handleFaceHover = (faceIndex: number | null) => {
    if ((isAddPanelMode || isPanelEditMode) && onFaceHover) {
      onFaceHover(faceIndex);
    }
  };

  const getFaceColor = (faceIndex: number) => {
    // Dinamik seÃ§im vurgulama (her zaman panel modunda aktif)
    if (isAddPanelMode && selectedDynamicFace === faceIndex) {
      return '#fbbf24'; // Yellow for dynamically selected face
    }
    // selectedFaces artÄ±k StoredPanel objeleri iÃ§erdiÄŸinden, faceIndex'i kontrol etmeliyiz
    if (selectedFaces.some(p => p.faceIndex === faceIndex)) return '#10b981'; // Green for confirmed selected
    if (hoveredFace === faceIndex) return '#eeeeee'; // Gray for hovered
    return '#3b82f6'; // Blue for default
  };

  const getFaceOpacity = (faceIndex: number) => {
    // Dinamik seÃ§im gÃ¶rÃ¼nÃ¼rlÃ¼ÄŸÃ¼ (her zaman panel modunda aktif)
    if (isAddPanelMode && selectedDynamicFace === faceIndex) {
      return 0.7; // More visible for selected face
    }
    // selectedFaces artÄ±k StoredPanel objeleri iÃ§erdiÄŸinden, faceIndex'i kontrol etmeliyiz
    if (selectedFaces.some(p => p.faceIndex === faceIndex)) return 0.0;
    if (hoveredFace === faceIndex) return 0.0;
    return 0.001;
  };

  // Panelleri sadece isAddPanelMode veya isPanelEditMode aktifse gÃ¶ster
  // veya alwaysShowPanels true ise gÃ¶ster
  if (!isAddPanelMode && !alwaysShowPanels && !isPanelEditMode) {
    return null;
  }

  return (
    <group>
      {/* Individual face overlays for panel mode - ALL FACES VISIBLE */}
      {/* Bu kÄ±sÄ±m, raycaster'Ä±n doÄŸru yÃ¼zeyleri algÄ±lamasÄ± iÃ§in hala gerekli olabilir.
          Ancak, eÄŸer raycaster doÄŸrudan ana mesh'in yÃ¼zeylerini algÄ±layabiliyorsa,
          bu overlay'ler gereksiz hale gelebilir veya sadece gÃ¶rsel geri bildirim iÃ§in kullanÄ±labilir.
          Åžimdilik, raycaster'Ä±n ana mesh'in yÃ¼zeylerini algÄ±ladÄ±ÄŸÄ±nÄ± varsayarak
          bu overlay'leri sadece gÃ¶rsel iÅŸaretÃ§i olarak tutuyoruz. */}
      {showFaces && shape.geometry && (
        <mesh
          geometry={shape.geometry}
          position={shape.position}
          rotation={shape.rotation}
          scale={shape.scale}
          onPointerMove={(e) => {
            e.stopPropagation();
            if (e.faceIndex !== undefined && e.faceIndex !== null) {
              handleFaceHover(e.faceIndex);
            } else {
              handleFaceHover(null);
            }
          }}
          onPointerLeave={() => handleFaceHover(null)}
          onClick={(e) => {
            if (e.face && e.faceIndex !== undefined && e.object) {
              handleClick(e, e.faceIndex, e.face, e.object);
            }
          }}
          onContextMenu={(e) => {
            // SaÄŸ tÄ±k menÃ¼sÃ¼nÃ¼ engelle
            e.nativeEvent.preventDefault();
            if (e.face && e.faceIndex !== undefined && e.object) {
              handleClick(e, e.faceIndex, e.face, e.object); // SaÄŸ tÄ±kÄ± da panel eklemek iÃ§in kullanabiliriz
            }
          }}
          // YÃ¼zeyleri gÃ¶rÃ¼nmez yap ama tÄ±klanabilir kalsÄ±n
          material={new THREE.MeshBasicMaterial({
            color: hoveredFace !== null ? getFaceColor(hoveredFace) : 0x3b82f6,
            transparent: true,
            opacity: hoveredFace !== null ? getFaceOpacity(hoveredFace) : 0.001,
            side: THREE.DoubleSide,
            depthTest: false,
          })}
        />
      )}


      {/* Dinamik olarak oluÅŸturulan paneller */}
      {smartPanelData.map((panelData) => (
        <mesh
          key={panelData.id} // Benzersiz ID kullan
          geometry={panelData.geometry}
          position={[
            shape.position[0] + panelData.position.x,
            shape.position[1] + panelData.position.y,
            shape.position[2] + panelData.position.z,
          ]}
          rotation={panelData.rotation} // Panel'in kendi dÃ¶nÃ¼ÅŸÃ¼nÃ¼ kullan
          scale={shape.scale} // Ana ÅŸeklin Ã¶lÃ§eÄŸini uygula
          castShadow
          receiveShadow
          visible={viewMode !== ViewMode.WIREFRAME}
          onClick={(e) => handlePanelMeshClick(e, panelData)}
        >
          {isPanelEditMode ? (
            <meshPhysicalMaterial
              color="#dc2626"
              roughness={0.6}
              metalness={0.02}
              transparent={viewMode === ViewMode.TRANSPARENT}
              opacity={viewMode === ViewMode.TRANSPARENT ? 0.3 : 1.0}
              depthWrite={viewMode === ViewMode.SOLID}
            />
          ) : (
            <meshPhysicalMaterial
              {...getPanelMaterial(panelData.faceIndex).parameters}
              transparent={viewMode === ViewMode.TRANSPARENT}
              opacity={viewMode === ViewMode.TRANSPARENT ? 0.3 : 1.0}
              depthWrite={viewMode === ViewMode.SOLID}
            />
          )}
        </mesh>
      ))}

      {/* Panel kenarlarÄ± */}
      {smartPanelData.map((panelData) => (
        <lineSegments
          key={`panel-edges-${panelData.id}`} // Benzersiz ID kullan
          geometry={new THREE.EdgesGeometry(panelData.geometry)}
          position={[
            shape.position[0] + panelData.position.x,
            shape.position[1] + panelData.position.y,
            shape.position[2] + panelData.position.z,
          ]}
          rotation={panelData.rotation} // Panel'in kendi dÃ¶nÃ¼ÅŸÃ¼nÃ¼ kullan
          scale={shape.scale}
          visible={
            viewMode === ViewMode.WIREFRAME ||
            isPanelEditMode ||
            selectedFaces.some(p => p.id === panelData.id) // ID'ye gÃ¶re kontrol
          }
        >
          <lineBasicMaterial
            color={isPanelEditMode ? '#7f1d1d' : getPanelEdgeColor()}
            linewidth={getPanelEdgeLineWidth()}
            transparent={
              viewMode === ViewMode.TRANSPARENT ||
              viewMode === ViewMode.WIREFRAME
            }
            opacity={viewMode === ViewMode.TRANSPARENT ? 0.5 : 1.0}
            depthTest={viewMode === ViewMode.SOLID}
          />
        </lineSegments>
      ))}
    </group>
  );
};

export default PanelManager;
