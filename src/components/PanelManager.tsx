import React, { useMemo, useCallback } from 'react';

import { useThree } from '@react-three/fiber';

import * as THREE from 'three';

import { Shape } from '../types/shapes';

import { ViewMode, useAppStore } from '../store/appStore'; // Corrected path



interface PanelManagerProps {

Â  shape: Shape;

Â  isAddPanelMode: boolean;

Â  selectedFaces: number[];

Â  hoveredFace: number | null;

Â  showEdges: boolean;

Â  showFaces: boolean;

Â  onFaceSelect: (faceIndex: number) => void;

Â  onFaceHover: (faceIndex: number | null) => void;

Â  // ðŸŽ¯ NEW PROP - Always show panels

Â  alwaysShowPanels?: boolean;

Â  // ðŸ”´ NEW: Panel Edit Mode props

Â  isPanelEditMode?: boolean;

Â  onPanelSelect?: (panelData: {

Â  Â  faceIndex: number;

Â  Â  position: THREE.Vector3;

Â  Â  size: THREE.Vector3;

Â  Â  panelOrder: number;

Â  }) => void;

Â  // Yeniden eklenen prop'lar

Â  faceCycleState: {

Â  Â  selectedFace: number | null;

Â  Â  currentIndex: number;

Â  Â  availableFaces: number[];

Â  Â  mousePosition: { x: number; y: number } | null;

Â  };

Â  setFaceCycleState: React.Dispatch<

Â  Â  React.SetStateAction<{

Â  Â  Â  selectedFace: number | null;

Â  Â  Â  currentIndex: number;

Â  Â  Â  availableFaces: number[];

Â  Â  Â  mousePosition: { x: number; y: number } | null;

Â  Â  }>

Â  >;

}



interface SmartPanelBounds {

Â  faceIndex: number;

Â  originalBounds: THREE.Box3;

Â  expandedBounds: THREE.Box3;

Â  finalPosition: THREE.Vector3;

Â  finalSize: THREE.Vector3;

Â  thickness: number;

Â  cuttingSurfaces: number[];

Â  isLastPanel: boolean;

Â  panelOrder: number;

}



const PanelManager: React.FC<PanelManagerProps> = ({

Â  shape,

Â  isAddPanelMode,

Â  selectedFaces,

Â  hoveredFace,

Â  showEdges,

Â  showFaces,

Â  onFaceSelect,

Â  onFaceHover,

Â  alwaysShowPanels = false,

Â  isPanelEditMode = false,

Â  onPanelSelect,

Â  faceCycleState,

Â  setFaceCycleState,

}) => {

Â  const panelThickness = 18; // 18mm panel thickness

Â  const { camera, raycaster, gl } = useThree();



Â  const { viewMode } = useAppStore();



Â  const woodMaterials = useMemo(() => {

Â  Â  const textureLoader = new THREE.TextureLoader();



Â  Â  const woodTexture = textureLoader.load(

Â  Â  Â  'https://images.pexels.com/photos/6757411/pexels-photo-6757411.jpeg'

Â  Â  );

Â  Â  woodTexture.wrapS = THREE.RepeatWrapping;

Â  Â  woodTexture.wrapT = THREE.RepeatWrapping;

Â  Â  woodTexture.repeat.set(0.64, 0.64);

Â  Â  woodTexture.anisotropy = 8;



Â  Â  const woodNormalMap = textureLoader.load(

Â  Â  Â  'https://images.pexels.com/photos/6757411/pexels-photo-6757411.jpeg'

Â  Â  );

Â  Â  woodNormalMap.wrapS = THREE.RepeatWrapping;

Â  Â  woodNormalMap.wrapT = THREE.RepeatWrapping;

Â  Â  woodNormalMap.repeat.set(0.6, 0.6);

Â  Â  woodNormalMap.anisotropy = 108;



Â  Â  const baseMaterialProps = {

Â  Â  Â  metalness: 0.02,

Â  Â  Â  roughness: 1.1,

Â  Â  Â  clearcoat: 0.4,

Â  Â  Â  clearcoatRoughness: 0.1,

Â  Â  Â  reflectivity: 0.1,

Â  Â  Â  envMapIntensity: 0.4,

Â  Â  Â  emissive: new THREE.Color(0x000000),

Â  Â  Â  emissiveIntensity: 0.0,

Â  Â  Â  side: THREE.DoubleSide,

Â  Â  Â  map: woodTexture,

Â  Â  Â  normalMap: woodNormalMap,

Â  Â  Â  normalScale: new THREE.Vector2(0.4, 0.4),

Â  Â  Â  color: new THREE.Color(0xf3f6f4),

Â  Â  Â  transparent: false,

Â  Â  Â  opacity: 1.0,

Â  Â  Â  alphaTest: 0,

Â  Â  Â  depthWrite: true,

Â  Â  Â  depthTest: true,

Â  Â  Â  premultipliedAlpha: false,

Â  Â  Â  vertexColors: false,

Â  Â  Â  fog: true,

Â  Â  Â  flatShading: false,

Â  Â  Â  iridescence: 0.0,

Â  Â  Â  iridescenceIOR: 1.0,

Â  Â  Â  sheen: 0.1,

Â  Â  Â  sheenRoughness: 0.9,

Â  Â  Â  sheenColor: new THREE.Color(0xffffff),

Â  Â  Â  specularIntensity: 0.3,

Â  Â  Â  specularColor: new THREE.Color(0xffffff),

Â  Â  Â  transmission: 0.0,

Â  Â  Â  thickness: 0.0,

Â  Â  Â  attenuationDistance: Infinity,

Â  Â  Â  attenuationColor: new THREE.Color(0xffffff),

Â  Â  Â  ior: 1.2,

Â  Â  };



Â  Â  const verticalMaterial = new THREE.MeshPhysicalMaterial(baseMaterialProps);



Â  Â  const horizontalMaterial = new THREE.MeshPhysicalMaterial({

Â  Â  Â  ...baseMaterialProps,

Â  Â  Â  map: woodTexture.clone(),

Â  Â  Â  normalMap: woodNormalMap.clone(),

Â  Â  });

Â  Â  horizontalMaterial.map!.rotation = Math.PI / 2;

Â  Â  horizontalMaterial.normalMap!.rotation = Math.PI / 2;



Â  Â  return {

Â  Â  Â  vertical: verticalMaterial,

Â  Â  Â  horizontal: horizontalMaterial,

Â  Â  };

Â  }, []);



Â  const calculateSmartPanelBounds = (

Â  Â  faceIndex: number,

Â  Â  allPanels: number[],

Â  Â  panelOrder: number

Â  ): SmartPanelBounds => {

Â  Â  const { width = 500, height = 500, depth = 500 } = shape.parameters;

Â  Â  const hw = width / 2;

Â  Â  const hh = height / 2;

Â  Â  const hd = depth / 2;

Â  Â  const previousPanels = allPanels.slice(0, panelOrder);

Â  Â  const isLastPanel = panelOrder === allPanels.length - 1;



Â  Â  let originalBounds: THREE.Box3;

Â  Â  let expandedBounds: THREE.Box3;

Â  Â  let finalPosition: THREE.Vector3;

Â  Â  let finalSize: THREE.Vector3;



Â  Â  switch (faceIndex) {

Â  Â  Â  case 0: // Front face

Â  Â  Â  Â  originalBounds = new THREE.Box3(

Â  Â  Â  Â  Â  new THREE.Vector3(-hw, -hh, hd - panelThickness),

Â  Â  Â  Â  Â  new THREE.Vector3(hw, hh, hd)

Â  Â  Â  Â  );

Â  Â  Â  Â  expandedBounds = originalBounds.clone();

Â  Â  Â  Â  previousPanels.forEach((previousPanel) => {

Â  Â  Â  Â  Â  if (previousPanel === 4) {

Â  Â  Â  Â  Â  Â  expandedBounds.max.x = Math.min(expandedBounds.max.x, hw - panelThickness);

Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  if (previousPanel === 5) {

Â  Â  Â  Â  Â  Â  expandedBounds.min.x = Math.max(expandedBounds.min.x, -hw + panelThickness);

Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  if (previousPanel === 2) {

Â  Â  Â  Â  Â  Â  expandedBounds.max.y = Math.min(expandedBounds.max.y, hh - panelThickness);

Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  if (previousPanel === 3) {

Â  Â  Â  Â  Â  Â  expandedBounds.min.y = Math.max(expandedBounds.min.y, -hh + panelThickness);

Â  Â  Â  Â  Â  }

Â  Â  Â  Â  });

Â  Â  Â  Â  finalSize = new THREE.Vector3(

Â  Â  Â  Â  Â  expandedBounds.max.x - expandedBounds.min.x,

Â  Â  Â  Â  Â  expandedBounds.max.y - expandedBounds.min.y,

Â  Â  Â  Â  Â  panelThickness

Â  Â  Â  Â  );

Â  Â  Â  Â  finalPosition = new THREE.Vector3(

Â  Â  Â  Â  Â  (expandedBounds.max.x + expandedBounds.min.x) / 2,

Â  Â  Â  Â  Â  (expandedBounds.max.y + expandedBounds.min.y) / 2,

Â  Â  Â  Â  Â  hd - panelThickness / 2

Â  Â  Â  Â  );

Â  Â  Â  Â  break;



Â  Â  Â  case 1: // Back face

Â  Â  Â  Â  originalBounds = new THREE.Box3(

Â  Â  Â  Â  Â  new THREE.Vector3(-hw, -hh, -hd),

Â  Â  Â  Â  Â  new THREE.Vector3(hw, hh, -hd + panelThickness)

Â  Â  Â  Â  );

Â  Â  Â  Â  expandedBounds = originalBounds.clone();

Â  Â  Â  Â  previousPanels.forEach((previousPanel) => {

Â  Â  Â  Â  Â  if (previousPanel === 4) {

Â  Â  Â  Â  Â  Â  expandedBounds.max.x = Math.min(expandedBounds.max.x, hw - panelThickness);

Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  if (previousPanel === 5) {

Â  Â  Â  Â  Â  Â  expandedBounds.min.x = Math.max(expandedBounds.min.x, -hw + panelThickness);

Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  if (previousPanel === 2) {

Â  Â  Â  Â  Â  Â  expandedBounds.max.y = Math.min(expandedBounds.max.y, hh - panelThickness);

Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  if (previousPanel === 3) {

Â  Â  Â  Â  Â  Â  expandedBounds.min.y = Math.max(expandedBounds.min.y, -hh + panelThickness);

Â  Â  Â  Â  Â  }

Â  Â  Â  Â  });

Â  Â  Â  Â  finalSize = new THREE.Vector3(

Â  Â  Â  Â  Â  expandedBounds.max.x - expandedBounds.min.x,

Â  Â  Â  Â  Â  expandedBounds.max.y - expandedBounds.min.y,

Â  Â  Â  Â  Â  panelThickness

Â  Â  Â  Â  );

Â  Â  Â  Â  finalPosition = new THREE.Vector3(

Â  Â  Â  Â  Â  (expandedBounds.max.x + expandedBounds.min.x) / 2,

Â  Â  Â  Â  Â  (expandedBounds.max.y + expandedBounds.min.y) / 2,

Â  Â  Â  Â  Â  -hd + panelThickness / 2

Â  Â  Â  Â  );

Â  Â  Â  Â  break;



Â  Â  Â  case 2: // Top face

Â  Â  Â  Â  originalBounds = new THREE.Box3(

Â  Â  Â  Â  Â  new THREE.Vector3(-hw, hh - panelThickness, -hd),

Â  Â  Â  Â  Â  new THREE.Vector3(hw, hh, hd)

Â  Â  Â  Â  );

Â  Â  Â  Â  expandedBounds = originalBounds.clone();

Â  Â  Â  Â  previousPanels.forEach((previousPanel) => {

Â  Â  Â  Â  Â  if (previousPanel === 4) {

Â  Â  Â  Â  Â  Â  expandedBounds.max.x = Math.min(expandedBounds.max.x, hw - panelThickness);

Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  if (previousPanel === 5) {

Â  Â  Â  Â  Â  Â  expandedBounds.min.x = Math.max(expandedBounds.min.x, -hw + panelThickness);

Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  if (previousPanel === 0) {

Â  Â  Â  Â  Â  Â  expandedBounds.max.z = Math.min(expandedBounds.max.z, hd - panelThickness);

Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  if (previousPanel === 1) {

Â  Â  Â  Â  Â  Â  expandedBounds.min.z = Math.max(expandedBounds.min.z, -hd + panelThickness);

Â  Â  Â  Â  Â  }

Â  Â  Â  Â  });

Â  Â  Â  Â  finalSize = new THREE.Vector3(

Â  Â  Â  Â  Â  expandedBounds.max.x - expandedBounds.min.x,

Â  Â  Â  Â  Â  panelThickness,

Â  Â  Â  Â  Â  expandedBounds.max.z - expandedBounds.min.z

Â  Â  Â  Â  );

Â  Â  Â  Â  finalPosition = new THREE.Vector3(

Â  Â  Â  Â  Â  (expandedBounds.max.x + expandedBounds.min.x) / 2,

Â  Â  Â  Â  Â  hh - panelThickness / 2,

Â  Â  Â  Â  Â  (expandedBounds.max.z + expandedBounds.min.z) / 2

Â  Â  Â  Â  );

Â  Â  Â  Â  break;



Â  Â  Â  case 3: // Bottom face

Â  Â  Â  Â  originalBounds = new THREE.Box3(

Â  Â  Â  Â  Â  new THREE.Vector3(-hw, -hh, -hd),

Â  Â  Â  Â  Â  new THREE.Vector3(hw, -hh + panelThickness, hd)

Â  Â  Â  Â  );

Â  Â  Â  Â  expandedBounds = originalBounds.clone();

Â  Â  Â  Â  previousPanels.forEach((previousPanel) => {

Â  Â  Â  Â  Â  if (previousPanel === 4) {

Â  Â  Â  Â  Â  Â  expandedBounds.max.x = Math.min(expandedBounds.max.x, hw - panelThickness);

Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  if (previousPanel === 5) {

Â  Â  Â  Â  Â  Â  expandedBounds.min.x = Math.max(expandedBounds.min.x, -hw + panelThickness);

Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  if (previousPanel === 0) {

Â  Â  Â  Â  Â  Â  expandedBounds.max.z = Math.min(expandedBounds.max.z, hd - panelThickness);

Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  if (previousPanel === 1) {

Â  Â  Â  Â  Â  Â  expandedBounds.min.z = Math.max(expandedBounds.min.z, -hd + panelThickness);

Â  Â  Â  Â  Â  }

Â  Â  Â  Â  });

Â  Â  Â  Â  finalSize = new THREE.Vector3(

Â  Â  Â  Â  Â  expandedBounds.max.x - expandedBounds.min.x,

Â  Â  Â  Â  Â  panelThickness,

Â  Â  Â  Â  Â  expandedBounds.max.z - expandedBounds.min.z

Â  Â  Â  Â  );

Â  Â  Â  Â  finalPosition = new THREE.Vector3(

Â  Â  Â  Â  Â  (expandedBounds.max.x + expandedBounds.min.x) / 2,

Â  Â  Â  Â  Â  -hh + panelThickness / 2,

Â  Â  Â  Â  Â  (expandedBounds.max.z + expandedBounds.min.z) / 2

Â  Â  Â  Â  );

Â  Â  Â  Â  break;



Â  Â  Â  case 4: // Right face

Â  Â  Â  Â  originalBounds = new THREE.Box3(

Â  Â  Â  Â  Â  new THREE.Vector3(hw - panelThickness, -hh, -hd),

Â  Â  Â  Â  Â  new THREE.Vector3(hw, hh, hd)

Â  Â  Â  Â  );

Â  Â  Â  Â  expandedBounds = originalBounds.clone();

Â  Â  Â  Â  previousPanels.forEach((previousPanel) => {

Â  Â  Â  Â  Â  if (previousPanel === 2) {

Â  Â  Â  Â  Â  Â  expandedBounds.max.y = Math.min(expandedBounds.max.y, hh - panelThickness);

Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  if (previousPanel === 3) {

Â  Â  Â  Â  Â  Â  expandedBounds.min.y = Math.max(expandedBounds.min.y, -hh + panelThickness);

Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  if (previousPanel === 0) {

Â  Â  Â  Â  Â  Â  expandedBounds.max.z = Math.min(expandedBounds.max.z, hd - panelThickness);

Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  if (previousPanel === 1) {

Â  Â  Â  Â  Â  Â  expandedBounds.min.z = Math.max(expandedBounds.min.z, -hd + panelThickness);

Â  Â  Â  Â  Â  }

Â  Â  Â  Â  });

Â  Â  Â  Â  finalSize = new THREE.Vector3(

Â  Â  Â  Â  Â  panelThickness,

Â  Â  Â  Â  Â  expandedBounds.max.y - expandedBounds.min.y,

Â  Â  Â  Â  Â  expandedBounds.max.z - expandedBounds.min.z

Â  Â  Â  Â  );

Â  Â  Â  Â  finalPosition = new THREE.Vector3(

Â  Â  Â  Â  Â  hw - panelThickness / 2,

Â  Â  Â  Â  Â  (expandedBounds.max.y + expandedBounds.min.y) / 2,

Â  Â  Â  Â  Â  (expandedBounds.max.z + expandedBounds.min.z) / 2

Â  Â  Â  Â  );

Â  Â  Â  Â  break;



Â  Â  Â  case 5: // Left face

Â  Â  Â  Â  originalBounds = new THREE.Box3(

Â  Â  Â  Â  Â  new THREE.Vector3(-hw, -hh, -hd),

Â  Â  Â  Â  Â  new THREE.Vector3(-hw + panelThickness, hh, hd)

Â  Â  Â  Â  );

Â  Â  Â  Â  expandedBounds = originalBounds.clone();

Â  Â  Â  Â  previousPanels.forEach((previousPanel) => {

Â  Â  Â  Â  Â  if (previousPanel === 2) {

Â  Â  Â  Â  Â  Â  expandedBounds.max.y = Math.min(expandedBounds.max.y, hh - panelThickness);

Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  if (previousPanel === 3) {

Â  Â  Â  Â  Â  Â  expandedBounds.min.y = Math.max(expandedBounds.min.y, -hh + panelThickness);

Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  if (previousPanel === 0) {

Â  Â  Â  Â  Â  Â  expandedBounds.max.z = Math.min(expandedBounds.max.z, hd - panelThickness);

Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  if (previousPanel === 1) {

Â  Â  Â  Â  Â  Â  expandedBounds.min.z = Math.max(expandedBounds.min.z, -hd + panelThickness);

Â  Â  Â  Â  Â  }

Â  Â  Â  Â  });

Â  Â  Â  Â  finalSize = new THREE.Vector3(

Â  Â  Â  Â  Â  panelThickness,

Â  Â  Â  Â  Â  expandedBounds.max.y - expandedBounds.min.y,

Â  Â  Â  Â  Â  expandedBounds.max.z - expandedBounds.min.z

Â  Â  Â  Â  );

Â  Â  Â  Â  finalPosition = new THREE.Vector3(

Â  Â  Â  Â  Â  -hw + panelThickness / 2,

Â  Â  Â  Â  Â  (expandedBounds.max.y + expandedBounds.min.y) / 2,

Â  Â  Â  Â  Â  (expandedBounds.max.z + expandedBounds.min.z) / 2

Â  Â  Â  Â  );

Â  Â  Â  Â  break;



Â  Â  Â  default:

Â  Â  Â  Â  originalBounds = new THREE.Box3();

Â  Â  Â  Â  expandedBounds = new THREE.Box3();

Â  Â  Â  Â  finalPosition = new THREE.Vector3();

Â  Â  Â  Â  finalSize = new THREE.Vector3(

Â  Â  Â  Â  Â  panelThickness,

Â  Â  Â  Â  Â  panelThickness,

Â  Â  Â  Â  Â  panelThickness

Â  Â  Â  Â  );

Â  Â  }



Â  Â  return {

Â  Â  Â  faceIndex,

Â  Â  Â  originalBounds,

Â  Â  Â  expandedBounds,

Â  Â  Â  finalPosition,

Â  Â  Â  finalSize,

Â  Â  Â  thickness: panelThickness,

Â  Â  Â  cuttingSurfaces: previousPanels,

Â  Â  Â  isLastPanel,

Â  Â  Â  panelOrder,

Â  Â  };

Â  };



Â  const smartPanelData = useMemo(() => {

Â  Â  if (shape.type !== 'box' || selectedFaces.length === 0) return [];

Â  Â  return selectedFaces.map((faceIndex, index) => {

Â  Â  Â  const panelOrder = index;

Â  Â  Â  const smartBounds = calculateSmartPanelBounds(

Â  Â  Â  Â  faceIndex,

Â  Â  Â  Â  selectedFaces,

Â  Â  Â  Â  panelOrder

Â  Â  Â  );



Â  Â  Â  const geometry = new THREE.BoxGeometry(

Â  Â  Â  Â  smartBounds.finalSize.x,

Â  Â  Â  Â  smartBounds.finalSize.y,

Â  Â  Â  Â  smartBounds.finalSize.z

Â  Â  Â  );



Â  Â  Â  return {

Â  Â  Â  Â  faceIndex,

Â  Â  Â  Â  geometry,

Â  Â  Â  Â  position: smartBounds.finalPosition,

Â  Â  Â  Â  size: smartBounds.finalSize,

Â  Â  Â  Â  panelOrder: smartBounds.panelOrder,

Â  Â  Â  };

Â  Â  });

Â  }, [shape.type, shape.parameters, selectedFaces]);



Â  const getPanelMaterial = (faceIndex: number) => {

Â  Â  if (faceIndex === 2 || faceIndex === 3) {

Â  Â  Â  return woodMaterials.horizontal;

Â  Â  }

Â  Â  return woodMaterials.vertical;

Â  };



Â  const getPanelColor = (faceIndex: number) => {

Â  Â  if (isPanelEditMode && selectedFaces.includes(faceIndex)) {

Â  Â  Â  return '#dc2626'; // RED for panels in edit mode

Â  Â  }

Â  Â  return getPanelMaterial(faceIndex);

Â  };



Â  const getPanelEdgeColor = () => {

Â  Â  switch (viewMode) {

Â  Â  Â  case ViewMode.WIREFRAME:

Â  Â  Â  Â  return '#ffffff'; // White edges in wireframe mode

Â  Â  Â  case ViewMode.TRANSPARENT:

Â  Â  Â  Â  return '#000000'; // Black edges in transparent mode

Â  Â  Â  case ViewMode.SOLID:

Â  Â  Â  Â  return '#2a2a2a'; // Dark gray in solid mode

Â  Â  Â  default:

Â  Â  Â  Â  return '#2a2a2a';

Â  Â  }

Â  };



Â  // Dinamik face detection - mouse pozisyonuna gÃ¶re hangi face'lerin altÄ±nda olduÄŸunu bul

Â  const detectFacesAtMousePosition = useCallback((event: MouseEvent): number[] => {

Â  Â  const rect = gl.domElement.getBoundingClientRect();

Â  Â  const x = ((event.clientX - rect.left) / rect.width) * 2 - 1;

Â  Â  const y = -((event.clientY - rect.top) / rect.height) * 2 + 1;



Â  Â  raycaster.setFromCamera({ x, y }, camera);

Â  Â Â 

Â  Â  // Box'Ä±n tÃ¼m face'lerini test et

Â  Â  const detectedFaces: { faceIndex: number; distance: number }[] = [];

Â  Â  const { width = 500, height = 500, depth = 500 } = shape.parameters;

Â  Â  const hw = width / 2;

Â  Â  const hh = height / 2;

Â  Â  const hd = depth / 2;



Â  Â  // Face geometrileri ve pozisyonlarÄ±

Â  Â  const faceData = [

Â  Â  Â  // Front face (0) - Z+

Â  Â  Â  { geometry: new THREE.PlaneGeometry(width, height), position: [0, 0, hd], rotation: [0, 0, 0] },

Â  Â  Â  // Back face (1) - Z-

Â  Â  Â  { geometry: new THREE.PlaneGeometry(width, height), position: [0, 0, -hd], rotation: [0, Math.PI, 0] },

Â  Â  Â  // Top face (2) - Y+

Â  Â  Â  { geometry: new THREE.PlaneGeometry(width, depth), position: [0, hh, 0], rotation: [-Math.PI / 2, 0, 0] },

Â  Â  Â  // Bottom face (3) - Y-

Â  Â  Â  { geometry: new THREE.PlaneGeometry(width, depth), position: [0, -hh, 0], rotation: [Math.PI / 2, 0, 0] },

Â  Â  Â  // Right face (4) - X+

Â  Â  Â  { geometry: new THREE.PlaneGeometry(depth, height), position: [hw, 0, 0], rotation: [0, Math.PI / 2, 0] },

Â  Â  Â  // Left face (5) - X-

Â  Â  Â  { geometry: new THREE.PlaneGeometry(depth, height), position: [-hw, 0, 0], rotation: [0, -Math.PI / 2, 0] },

Â  Â  ];



Â  Â  faceData.forEach((face, faceIndex) => {

Â  Â  Â  const mesh = new THREE.Mesh(face.geometry);

Â  Â  Â  mesh.position.set(

Â  Â  Â  Â  shape.position[0] + face.position[0],

Â  Â  Â  Â  shape.position[1] + face.position[1],

Â  Â  Â  Â  shape.position[2] + face.position[2]

Â  Â  Â  );

Â  Â  Â  mesh.rotation.set(

Â  Â  Â  Â  shape.rotation[0] + face.rotation[0],

Â  Â  Â  Â  shape.rotation[1] + face.rotation[1],

Â  Â  Â  Â  shape.rotation[2] + face.rotation[2]

Â  Â  Â  );

Â  Â  Â  mesh.scale.set(...shape.scale);

Â  Â  Â  mesh.updateMatrixWorld();



Â  Â  Â  const intersects = raycaster.intersectObject(mesh);

Â  Â  Â  if (intersects.length > 0) {

Â  Â  Â  Â  detectedFaces.push({

Â  Â  Â  Â  Â  faceIndex,

Â  Â  Â  Â  Â  distance: intersects[0].distance

Â  Â  Â  Â  });

Â  Â  Â  }

Â  Â  });



Â  Â  // Mesafeye gÃ¶re sÄ±rala (en yakÄ±ndan en uzaÄŸa)

Â  Â  detectedFaces.sort((a, b) => a.distance - b.distance);

Â  Â  return detectedFaces.map(f => f.faceIndex);

Â  }, [camera, raycaster, gl, shape]);



Â  // Mouse pozisyonunu gÃ¼ncelle

Â  const updateMousePosition = useCallback((event: MouseEvent) => {

Â  Â  setFaceCycleState(prev => ({

Â  Â  Â  ...prev,

Â  Â  Â  mousePosition: { x: event.clientX, y: event.clientY }

Â  Â  }));

Â  }, [setFaceCycleState]);



Â  // Wrap handleClick with useCallback to ensure stable function reference

Â  const handleClick = useCallback((e: any, faceIndex: number) => {

Â  Â  e.stopPropagation();

Â  Â Â 

Â  Â  // Mouse pozisyonunu gÃ¼ncelle

Â  Â  updateMousePosition(e.nativeEvent);



Â  Â  if (isAddPanelMode && e.nativeEvent.button === 0) {

Â  Â  Â  // Dinamik face detection

Â  Â  Â  const detectedFaces = detectFacesAtMousePosition(e.nativeEvent);

Â  Â  Â Â 

Â  Â  Â  if (detectedFaces.length === 0) return;



Â  Â  Â  // EÄŸer cycle state boÅŸsa veya farklÄ± bir pozisyonda tÄ±klandÄ±ysa, yeni cycle baÅŸlat

Â  Â  Â  if (faceCycleState.availableFaces.length === 0 ||Â 

Â  Â  Â  Â  Â  JSON.stringify(faceCycleState.availableFaces) !== JSON.stringify(detectedFaces)) {

Â  Â  Â  Â  setFaceCycleState({

Â  Â  Â  Â  Â  availableFaces: detectedFaces,

Â  Â  Â  Â  Â  currentIndex: 0,

Â  Â  Â  Â  Â  selectedFace: detectedFaces[0],

Â  Â  Â  Â  Â  mousePosition: { x: e.nativeEvent.clientX, y: e.nativeEvent.clientY }

Â  Â  Â  Â  });

Â  Â  Â  Â  console.log(`ðŸŽ¯ Face cycle started: ${detectedFaces.length} faces detected`);

Â  Â  Â  } else {

Â  Â  Â  Â  // Cycle iÃ§inde bir sonraki face'e geÃ§

Â  Â  Â  Â  const nextIndex = (faceCycleState.currentIndex + 1) % faceCycleState.availableFaces.length;

Â  Â  Â  Â  setFaceCycleState(prev => ({

Â  Â  Â  Â  Â  ...prev,

Â  Â  Â  Â  Â  currentIndex: nextIndex,

Â  Â  Â  Â  Â  selectedFace: prev.availableFaces[nextIndex]

Â  Â  Â  Â  }));

Â  Â  Â  Â  console.log(`ðŸŽ¯ Face cycled to: ${faceCycleState.availableFaces[nextIndex]} (${nextIndex + 1}/${faceCycleState.availableFaces.length})`);

Â  Â  Â  }

Â  Â  } else if (isPanelEditMode && e.nativeEvent.button === 0) {

Â  Â  Â  // Edit modunda sol tÄ±k ile paneli seÃ§

Â  Â  Â  const panelData = smartPanelData.find(

Â  Â  Â  Â  (panel) => panel.faceIndex === faceIndex

Â  Â  Â  );

Â  Â  Â  if (panelData && onPanelSelect) {

Â  Â  Â  Â  onPanelSelect({

Â  Â  Â  Â  Â  faceIndex: panelData.faceIndex,

Â  Â  Â  Â  Â  position: panelData.position,

Â  Â  Â  Â  Â  size: panelData.size,

Â  Â  Â  Â  Â  panelOrder: panelData.panelOrder,

Â  Â  Â  Â  });

Â  Â  Â  }

Â  Â  }

Â  }, [isAddPanelMode, isPanelEditMode, selectedFaces, onFaceSelect, smartPanelData, onPanelSelect, detectFacesAtMousePosition, faceCycleState, setFaceCycleState, updateMousePosition]);



Â  const handleContextMenu = useCallback((e: any, faceIndex: number) => {

Â  Â  // SaÄŸ tÄ±k ile panel yerleÅŸtirmeyi onayla

Â  Â  if (!isAddPanelMode) return;



Â  Â  e.stopPropagation();

Â  Â  e.nativeEvent.preventDefault();



Â  Â  // EÄŸer cycle state'de seÃ§ili face varsa, onu onayla

Â  Â  if (faceCycleState.selectedFace !== null) {

Â  Â  Â  onFaceSelect(faceCycleState.selectedFace);

Â  Â  Â Â 

Â  Â  Â  // Cycle state'i sÄ±fÄ±rla

Â  Â  Â  setFaceCycleState({

Â  Â  Â  Â  availableFaces: [],

Â  Â  Â  Â  currentIndex: 0,

Â  Â  Â  Â  selectedFace: null,

Â  Â  Â  Â  mousePosition: null

Â  Â  Â  });

Â  Â  Â Â 

Â  Â  Â  console.log(`ðŸŽ¯ Panel confirmed on face: ${faceCycleState.selectedFace}`);

Â  Â  }

Â  }, [isAddPanelMode, onFaceSelect, faceCycleState, setFaceCycleState]);





Â  const handleFaceHover = useCallback((faceIndex: number | null) => {

Â  Â  if ((isAddPanelMode || isPanelEditMode) && onFaceHover) {

Â  Â  Â  onFaceHover(faceIndex);

Â  Â  }

Â  }, [isAddPanelMode, isPanelEditMode, onFaceHover]);

Â Â 

Â  // Hayali panel iÃ§in material

Â  const ghostPanelMaterial = new THREE.MeshBasicMaterial({

Â  Â  color: '#fbbf24', // SarÄ±

Â  Â  transparent: true,

Â  Â  opacity: 0.5,

Â  Â  side: THREE.DoubleSide,

Â  Â  depthTest: false,

Â  });



Â  const getFaceColor = (faceIndex: number) => {

Â  Â  if (selectedFaces.includes(faceIndex)) return '#10b981';

Â  Â  if (hoveredFace === faceIndex) return '#eeeeee';

Â  Â  return '#3b82f6';

Â  };



Â  const getFaceOpacity = (faceIndex: number) => {

Â  Â  if (isAddPanelMode && hoveredFace === faceIndex) return 0.0; // Hoverlanan yÃ¼zÃ¼ gÃ¶rÃ¼nmez yap

Â  Â  if (selectedFaces.includes(faceIndex)) return 0.0;

Â  Â  return 0.001; // DiÄŸer yÃ¼zeyleri neredeyse gÃ¶rÃ¼nmez yapar

Â  };



Â  const getPanelEdgeLineWidth = () => {

Â  Â  const screenWidth = window.innerWidth;

Â  Â  if (screenWidth < 768) {

Â  Â  Â  return 1.0;

Â  Â  } else if (screenWidth < 1024) {

Â  Â  Â  return 1.5;

Â  Â  } else {

Â  Â  Â  return 2.0;

Â  Â  }

Â  };



Â  if (

Â  Â  (!isAddPanelMode && !alwaysShowPanels && !isPanelEditMode) ||

Â  Â  shape.type !== 'box'

Â  ) {

Â  Â  return null;

Â  }



Â  // Face positions and rotations for box

Â  const faceTransforms = useMemo(() => {

Â  Â  const { width = 500, height = 500, depth = 500 } = shape.parameters;

Â  Â  const hw = width / 2;

Â  Â  const hh = height / 2;

Â  Â  const hd = depth / 2;



Â  Â  return [

Â  Â  Â  // Front face (0) - Z+

Â  Â  Â  { position: [0, 0, hd], rotation: [0, 0, 0] },

Â  Â  Â  // Back face (1) - Z-

Â  Â  Â  { position: [0, 0, -hd], rotation: [0, Math.PI, 0] },

Â  Â  Â  // Top face (2) - Y+

Â  Â  Â  { position: [0, hh, 0], rotation: [-Math.PI / 2, 0, 0] },

Â  Â  Â  // Bottom face (3) - Y-

Â  Â  Â  { position: [0, -hh, 0], rotation: [Math.PI / 2, 0, 0] },

Â  Â  Â  // Right face (4) - X+

Â  Â  Â  { position: [hw, 0, 0], rotation: [0, Math.PI / 2, 0] },

Â  Â  Â  // Left face (5) - X-

Â  Â  Â  { position: [-hw, 0, 0], rotation: [0, -Math.PI / 2, 0] },

Â  Â  ];

Â  }, [shape.parameters]);



Â  return (

Â  Â  <group>

Â  Â  Â  {/* Individual face overlays for panel mode - ALL FACES VISIBLE */}

Â  Â  Â  {showFaces &&

Â  Â  Â  Â  faceTransforms.map((transform, faceIndex) => {

Â  Â  Â  Â  Â  const opacity = getFaceOpacity(faceIndex);



Â  Â  Â  Â  Â  return (

Â  Â  Â  Â  Â  Â  <mesh

Â  Â  Â  Â  Â  Â  Â  key={`face-${faceIndex}`}

Â  Â  Â  Â  Â  Â  Â  geometry={new THREE.PlaneGeometry(

Â  Â  Â  Â  Â  Â  Â  Â  faceIndex === 2 || faceIndex === 3 ? shape.parameters.width : (faceIndex === 4 || faceIndex === 5 ? shape.parameters.depth : shape.parameters.width),

Â  Â  Â  Â  Â  Â  Â  Â  faceIndex === 2 || faceIndex === 3 ? shape.parameters.depth : shape.parameters.height

Â  Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  Â  position={[

Â  Â  Â  Â  Â  Â  Â  Â  shape.position[0] + transform.position[0],

Â  Â  Â  Â  Â  Â  Â  Â  shape.position[1] + transform.position[1],

Â  Â  Â  Â  Â  Â  Â  Â  shape.position[2] + transform.position[2],

Â  Â  Â  Â  Â  Â  Â  ]}

Â  Â  Â  Â  Â  Â  Â  rotation={[

Â  Â  Â  Â  Â  Â  Â  Â  shape.rotation[0] + transform.rotation[0],

Â  Â  Â  Â  Â  Â  Â  Â  shape.rotation[1] + transform.rotation[1],

Â  Â  Â  Â  Â  Â  Â  Â  shape.rotation[2] + transform.rotation[2],

Â  Â  Â  Â  Â  Â  Â  ]}

Â  Â  Â  Â  Â  Â  Â  scale={shape.scale}

Â  Â  Â  Â  Â  Â  Â  onClick={(e) => handleClick(e, faceIndex)}

Â  Â  Â  Â  Â  Â  Â  onContextMenu={(e) => handleContextMenu(e, faceIndex)} // SaÄŸ tÄ±k eklendi

Â  Â  Â  Â  Â  Â  Â  onPointerEnter={() => handleFaceHover(faceIndex)}

Â  Â  Â  Â  Â  Â  Â  onPointerLeave={() => handleFaceHover(null)}

Â  Â  Â  Â  Â  Â  >

Â  Â  Â  Â  Â  Â  Â  <meshBasicMaterial

Â  Â  Â  Â  Â  Â  Â  Â  color={getFaceColor(faceIndex)}

Â  Â  Â  Â  Â  Â  Â  Â  transparent

Â  Â  Â  Â  Â  Â  Â  Â  opacity={opacity}

Â  Â  Â  Â  Â  Â  Â  Â  side={THREE.DoubleSide}

Â  Â  Â  Â  Â  Â  Â  Â  depthTest={false}

Â  Â  Â  Â  Â  Â  Â  />

Â  Â  Â  Â  Â  Â  </mesh>

Â  Â  Â  Â  Â  );

Â  Â  Â  Â  })}



Â  Â  Â  {/* ðŸŽ¯ HAYALÄ° PANEL - YÃ¼zeye yaklaÅŸtÄ±ÄŸÄ±nda gÃ¶sterilecek */}

Â  Â  Â  {isAddPanelMode && faceCycleState.selectedFace !== null && !selectedFaces.includes(faceCycleState.selectedFace) && (

Â  Â  Â  Â  <mesh

Â  Â  Â  Â  Â  key={`ghost-panel-${faceCycleState.selectedFace}`}

Â  Â  Â  Â  Â  geometry={new THREE.PlaneGeometry(

Â  Â  Â  Â  Â  Â  faceCycleState.selectedFace === 2 || faceCycleState.selectedFace === 3 ? shape.parameters.width : (faceCycleState.selectedFace === 4 || faceCycleState.selectedFace === 5 ? shape.parameters.depth : shape.parameters.width),

Â  Â  Â  Â  Â  Â  faceCycleState.selectedFace === 2 || faceCycleState.selectedFace === 3 ? shape.parameters.depth : shape.parameters.height

Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  position={[

Â  Â  Â  Â  Â  Â  shape.position[0] + faceTransforms[faceCycleState.selectedFace].position[0],

Â  Â  Â  Â  Â  Â  shape.position[1] + faceTransforms[faceCycleState.selectedFace].position[1],

Â  Â  Â  Â  Â  Â  shape.position[2] + faceTransforms[faceCycleState.selectedFace].position[2],

Â  Â  Â  Â  Â  ]}

Â  Â  Â  Â  Â  rotation={[

Â  Â  Â  Â  Â  Â  shape.rotation[0] + faceTransforms[faceCycleState.selectedFace].rotation[0],

Â  Â  Â  Â  Â  Â  shape.rotation[1] + faceTransforms[faceCycleState.selectedFace].rotation[1],

Â  Â  Â  Â  Â  Â  shape.rotation[2] + faceTransforms[faceCycleState.selectedFace].rotation[2],

Â  Â  Â  Â  Â  ]}

Â  Â  Â  Â  Â  scale={shape.scale}

Â  Â  Â  Â  Â  material={ghostPanelMaterial}

Â  Â  Â  Â  />

Â  Â  Â  )}



Â  Â  Â  {/* ðŸŽ¯ GUARANTEED LAST PANEL SHRINKS - Wood panels with guaranteed sizing */}

Â  Â  Â  {smartPanelData.map((panelData) => (

Â  Â  Â  Â  <mesh

Â  Â  Â  Â  Â  key={`guaranteed-panel-${panelData.faceIndex}`}

Â  Â  Â  Â  Â  geometry={panelData.geometry}

Â  Â  Â  Â  Â  position={[

Â  Â  Â  Â  Â  Â  shape.position[0] + panelData.position.x,

Â  Â  Â  Â  Â  Â  shape.position[1] + panelData.position.y,

Â  Â  Â  Â  Â  Â  shape.position[2] + panelData.position.z,

Â  Â  Â  Â  Â  ]}

Â  Â  Â  Â  Â  rotation={shape.rotation}

Â  Â  Â  Â  Â  scale={shape.scale}

Â  Â  Â  Â  Â  castShadow

Â  Â  Â  Â  Â  receiveShadow

Â  Â  Â  Â  Â  // Hide mesh in wireframe mode

Â  Â  Â  Â  Â  visible={viewMode !== ViewMode.WIREFRAME}

Â  Â  Â  Â  Â  // ðŸ”´ NEW: Click handler for panel edit mode

Â  Â  Â  Â  Â  onClick={(e) => {

Â  Â  Â  Â  Â  Â  if (isPanelEditMode) {

Â  Â  Â  Â  Â  Â  Â  e.stopPropagation();

Â  Â  Â  Â  Â  Â  Â  if (onPanelSelect) {

Â  Â  Â  Â  Â  Â  Â  Â  onPanelSelect({

Â  Â  Â  Â  Â  Â  Â  Â  Â  faceIndex: panelData.faceIndex,

Â  Â  Â  Â  Â  Â  Â  Â  Â  position: panelData.position,

Â  Â  Â  Â  Â  Â  Â  Â  Â  size: panelData.size,

Â  Â  Â  Â  Â  Â  Â  Â  Â  panelOrder: panelData.panelOrder,

Â  Â  Â  Â  Â  Â  Â  Â  });

Â  Â  Â  Â  Â  Â  Â  Â  console.log(

Â  Â  Â  Â  Â  Â  Â  Â  Â  `ðŸ”´ Panel ${panelData.faceIndex} clicked for editing`

Â  Â  Â  Â  Â  Â  Â  Â  );

Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  }}

Â  Â  Â  Â  >

Â  Â  Â  Â  Â  {isPanelEditMode ? (

Â  Â  Â  Â  Â  Â  <meshPhysicalMaterial

Â  Â  Â  Â  Â  Â  Â  color="#dc2626"

Â  Â  Â  Â  Â  Â  Â  roughness={0.6}

Â  Â  Â  Â  Â  Â  Â  metalness={0.02}

Â  Â  Â  Â  Â  Â  Â  transparent={viewMode === ViewMode.TRANSPARENT}

Â  Â  Â  Â  Â  Â  Â  opacity={viewMode === ViewMode.TRANSPARENT ? 0.3 : 1.0}

Â  Â  Â  Â  Â  Â  Â  depthWrite={viewMode === ViewMode.SOLID}

Â  Â  Â  Â  Â  Â  />

Â  Â  Â  Â  Â  ) : (

Â  Â  Â  Â  Â  Â  <meshPhysicalMaterial

Â  Â  Â  Â  Â  Â  Â  {...getPanelMaterial(panelData.faceIndex).parameters}

Â  Â  Â  Â  Â  Â  Â  transparent={viewMode === ViewMode.TRANSPARENT}

Â  Â  Â  Â  Â  Â  Â  opacity={viewMode === ViewMode.TRANSPARENT ? 0.3 : 1.0}

Â  Â  Â  Â  Â  Â  Â  depthWrite={viewMode === ViewMode.SOLID}

Â  Â  Â  Â  Â  Â  />

Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  </mesh>

Â  Â  Â  ))}



Â  Â  Â  {/* ðŸŽ¨ PROFESSIONAL SHARP EDGES - Clear black outlines */}

Â  Â  Â  {smartPanelData.map((panelData) => (

Â  Â  Â  Â  <lineSegments

Â  Â  Â  Â  Â  key={`guaranteed-panel-edges-${panelData.faceIndex}`}

Â  Â  Â  Â  Â  geometry={new THREE.EdgesGeometry(panelData.geometry)}

Â  Â  Â  Â  Â  position={[

Â  Â  Â  Â  Â  Â  shape.position[0] + panelData.position.x,

Â  Â  Â  Â  Â  Â  shape.position[1] + panelData.position.y,

Â  Â  Â  Â  Â  Â  shape.position[2] + panelData.position.z,

Â  Â  Â  Â  Â  ]}

Â  Â  Â  Â  Â  rotation={shape.rotation}

Â  Â  Â  Â  Â  scale={shape.scale}

Â  Â  Â  Â  Â  visible={

Â  Â  Â  Â  Â  Â  viewMode === ViewMode.WIREFRAME ||

Â  Â  Â  Â  Â  Â  isPanelEditMode ||

Â  Â  Â  Â  Â  Â  selectedFaces.includes(panelData.faceIndex)

Â  Â  Â  Â  Â  }

Â  Â  Â  Â  >

Â  Â  Â  Â  Â  <lineBasicMaterial

Â  Â  Â  Â  Â  Â  color={isPanelEditMode ? '#7f1d1d' : getPanelEdgeColor()}

Â  Â  Â  Â  Â  Â  linewidth={getPanelEdgeLineWidth()}

Â  Â  Â  Â  Â  Â  transparent={

Â  Â  Â  Â  Â  Â  Â  viewMode === ViewMode.TRANSPARENT ||

Â  Â  Â  Â  Â  Â  Â  viewMode === ViewMode.WIREFRAME

Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  opacity={viewMode === ViewMode.TRANSPARENT ? 0.5 : 1.0}

Â  Â  Â  Â  Â  Â  depthTest={viewMode === ViewMode.SOLID}

Â  Â  Â  Â  Â  />

Â  Â  Â  Â  </lineSegments>

Â  Â  Â  ))}

Â  Â  </group>

Â  );

};



export default PanelManager;